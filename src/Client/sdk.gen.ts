// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetLogEntriesData, GetLogEntriesResponses, GetLogEntriesErrors, GetKeysData, GetKeysResponses, GetKeysErrors, CreateKeyData, CreateKeyResponses, CreateKeyErrors, RevokeKeyData, RevokeKeyResponses, RevokeKeyErrors, GetArtistsData, GetArtistsResponses, GetArtistsErrors, GetArtistByNameData, GetArtistByNameResponses, GetArtistByNameErrors, GetAlbumArtistsData, GetAlbumArtistsResponses, GetAlbumArtistsErrors, GetAudioStreamData, GetAudioStreamResponses, HeadAudioStreamData, HeadAudioStreamResponses, GetAudioStreamByContainerData, GetAudioStreamByContainerResponses, HeadAudioStreamByContainerData, HeadAudioStreamByContainerResponses, GetBrandingOptionsData, GetBrandingOptionsResponses, GetBrandingCssData, GetBrandingCssResponses, GetBrandingCss2Data, GetBrandingCss2Responses, GetChannelsData, GetChannelsResponses, GetChannelsErrors, GetChannelFeaturesData, GetChannelFeaturesResponses, GetChannelFeaturesErrors, GetChannelItemsData, GetChannelItemsResponses, GetChannelItemsErrors, GetAllChannelFeaturesData, GetAllChannelFeaturesResponses, GetAllChannelFeaturesErrors, GetLatestChannelItemsData, GetLatestChannelItemsResponses, GetLatestChannelItemsErrors, LogFileData, LogFileResponses, LogFileErrors, CreateCollectionData, CreateCollectionResponses, CreateCollectionErrors, RemoveFromCollectionData, RemoveFromCollectionResponses, RemoveFromCollectionErrors, AddToCollectionData, AddToCollectionResponses, AddToCollectionErrors, GetConfigurationData, GetConfigurationResponses, GetConfigurationErrors, UpdateConfigurationData, UpdateConfigurationResponses, UpdateConfigurationErrors, GetNamedConfigurationData, GetNamedConfigurationResponses, GetNamedConfigurationErrors, UpdateNamedConfigurationData, UpdateNamedConfigurationResponses, UpdateNamedConfigurationErrors, GetDefaultMetadataOptionsData, GetDefaultMetadataOptionsResponses, GetDefaultMetadataOptionsErrors, GetDashboardConfigurationPageData, GetDashboardConfigurationPageResponses, GetDashboardConfigurationPageErrors, GetConfigurationPagesData, GetConfigurationPagesResponses, GetConfigurationPagesErrors, DeleteDeviceData, DeleteDeviceResponses, DeleteDeviceErrors, GetDevicesData, GetDevicesResponses, GetDevicesErrors, GetDeviceInfoData, GetDeviceInfoResponses, GetDeviceInfoErrors, GetDeviceOptionsData, GetDeviceOptionsResponses, GetDeviceOptionsErrors, UpdateDeviceOptionsData, UpdateDeviceOptionsResponses, UpdateDeviceOptionsErrors, GetDisplayPreferencesData, GetDisplayPreferencesResponses, GetDisplayPreferencesErrors, UpdateDisplayPreferencesData, UpdateDisplayPreferencesResponses, UpdateDisplayPreferencesErrors, GetHlsAudioSegmentData, GetHlsAudioSegmentResponses, GetHlsAudioSegmentErrors, GetVariantHlsAudioPlaylistData, GetVariantHlsAudioPlaylistResponses, GetVariantHlsAudioPlaylistErrors, GetMasterHlsAudioPlaylistData, GetMasterHlsAudioPlaylistResponses, GetMasterHlsAudioPlaylistErrors, HeadMasterHlsAudioPlaylistData, HeadMasterHlsAudioPlaylistResponses, HeadMasterHlsAudioPlaylistErrors, GetHlsVideoSegmentData, GetHlsVideoSegmentResponses, GetHlsVideoSegmentErrors, GetLiveHlsStreamData, GetLiveHlsStreamResponses, GetLiveHlsStreamErrors, GetVariantHlsVideoPlaylistData, GetVariantHlsVideoPlaylistResponses, GetVariantHlsVideoPlaylistErrors, GetMasterHlsVideoPlaylistData, GetMasterHlsVideoPlaylistResponses, GetMasterHlsVideoPlaylistErrors, HeadMasterHlsVideoPlaylistData, HeadMasterHlsVideoPlaylistResponses, HeadMasterHlsVideoPlaylistErrors, GetDefaultDirectoryBrowserData, GetDefaultDirectoryBrowserResponses, GetDefaultDirectoryBrowserErrors, GetDirectoryContentsData, GetDirectoryContentsResponses, GetDirectoryContentsErrors, GetDrivesData, GetDrivesResponses, GetDrivesErrors, GetNetworkSharesData, GetNetworkSharesResponses, GetNetworkSharesErrors, GetParentPathData, GetParentPathResponses, GetParentPathErrors, ValidatePathData, ValidatePathResponses, ValidatePathErrors, GetQueryFiltersLegacyData, GetQueryFiltersLegacyResponses, GetQueryFiltersLegacyErrors, GetQueryFiltersData, GetQueryFiltersResponses, GetQueryFiltersErrors, GetGenresData, GetGenresResponses, GetGenresErrors, GetGenreData, GetGenreResponses, GetGenreErrors, GetHlsAudioSegmentLegacyAacData, GetHlsAudioSegmentLegacyAacResponses, GetHlsAudioSegmentLegacyMp3Data, GetHlsAudioSegmentLegacyMp3Responses, GetHlsVideoSegmentLegacyData, GetHlsVideoSegmentLegacyResponses, GetHlsVideoSegmentLegacyErrors, GetHlsPlaylistLegacyData, GetHlsPlaylistLegacyResponses, GetHlsPlaylistLegacyErrors, StopEncodingProcessData, StopEncodingProcessResponses, StopEncodingProcessErrors, GetArtistImageData, GetArtistImageResponses, GetArtistImageErrors, HeadArtistImageData, HeadArtistImageResponses, HeadArtistImageErrors, DeleteCustomSplashscreenData, DeleteCustomSplashscreenResponses, DeleteCustomSplashscreenErrors, GetSplashscreenData, GetSplashscreenResponses, UploadCustomSplashscreenData, UploadCustomSplashscreenResponses, UploadCustomSplashscreenErrors, GetGenreImageData, GetGenreImageResponses, GetGenreImageErrors, HeadGenreImageData, HeadGenreImageResponses, HeadGenreImageErrors, GetGenreImageByIndexData, GetGenreImageByIndexResponses, GetGenreImageByIndexErrors, HeadGenreImageByIndexData, HeadGenreImageByIndexResponses, HeadGenreImageByIndexErrors, GetItemImageInfosData, GetItemImageInfosResponses, GetItemImageInfosErrors, DeleteItemImageData, DeleteItemImageResponses, DeleteItemImageErrors, GetItemImageData, GetItemImageResponses, GetItemImageErrors, HeadItemImageData, HeadItemImageResponses, HeadItemImageErrors, SetItemImageData, SetItemImageResponses, SetItemImageErrors, DeleteItemImageByIndexData, DeleteItemImageByIndexResponses, DeleteItemImageByIndexErrors, GetItemImageByIndexData, GetItemImageByIndexResponses, GetItemImageByIndexErrors, HeadItemImageByIndexData, HeadItemImageByIndexResponses, HeadItemImageByIndexErrors, SetItemImageByIndexData, SetItemImageByIndexResponses, SetItemImageByIndexErrors, GetItemImage2Data, GetItemImage2Responses, GetItemImage2Errors, HeadItemImage2Data, HeadItemImage2Responses, HeadItemImage2Errors, UpdateItemImageIndexData, UpdateItemImageIndexResponses, UpdateItemImageIndexErrors, GetMusicGenreImageData, GetMusicGenreImageResponses, GetMusicGenreImageErrors, HeadMusicGenreImageData, HeadMusicGenreImageResponses, HeadMusicGenreImageErrors, GetMusicGenreImageByIndexData, GetMusicGenreImageByIndexResponses, GetMusicGenreImageByIndexErrors, HeadMusicGenreImageByIndexData, HeadMusicGenreImageByIndexResponses, HeadMusicGenreImageByIndexErrors, GetPersonImageData, GetPersonImageResponses, GetPersonImageErrors, HeadPersonImageData, HeadPersonImageResponses, HeadPersonImageErrors, GetPersonImageByIndexData, GetPersonImageByIndexResponses, GetPersonImageByIndexErrors, HeadPersonImageByIndexData, HeadPersonImageByIndexResponses, HeadPersonImageByIndexErrors, GetStudioImageData, GetStudioImageResponses, GetStudioImageErrors, HeadStudioImageData, HeadStudioImageResponses, HeadStudioImageErrors, GetStudioImageByIndexData, GetStudioImageByIndexResponses, GetStudioImageByIndexErrors, HeadStudioImageByIndexData, HeadStudioImageByIndexResponses, HeadStudioImageByIndexErrors, DeleteUserImageData, DeleteUserImageResponses, DeleteUserImageErrors, GetUserImageData, GetUserImageResponses, GetUserImageErrors, HeadUserImageData, HeadUserImageResponses, HeadUserImageErrors, PostUserImageData, PostUserImageResponses, PostUserImageErrors, GetInstantMixFromAlbumData, GetInstantMixFromAlbumResponses, GetInstantMixFromAlbumErrors, GetInstantMixFromArtistsData, GetInstantMixFromArtistsResponses, GetInstantMixFromArtistsErrors, GetInstantMixFromArtists2Data, GetInstantMixFromArtists2Responses, GetInstantMixFromArtists2Errors, GetInstantMixFromItemData, GetInstantMixFromItemResponses, GetInstantMixFromItemErrors, GetInstantMixFromMusicGenreByNameData, GetInstantMixFromMusicGenreByNameResponses, GetInstantMixFromMusicGenreByNameErrors, GetInstantMixFromMusicGenreByIdData, GetInstantMixFromMusicGenreByIdResponses, GetInstantMixFromMusicGenreByIdErrors, GetInstantMixFromPlaylistData, GetInstantMixFromPlaylistResponses, GetInstantMixFromPlaylistErrors, GetInstantMixFromSongData, GetInstantMixFromSongResponses, GetInstantMixFromSongErrors, GetExternalIdInfosData, GetExternalIdInfosResponses, GetExternalIdInfosErrors, ApplySearchCriteriaData, ApplySearchCriteriaResponses, ApplySearchCriteriaErrors, GetBookRemoteSearchResultsData, GetBookRemoteSearchResultsResponses, GetBookRemoteSearchResultsErrors, GetBoxSetRemoteSearchResultsData, GetBoxSetRemoteSearchResultsResponses, GetBoxSetRemoteSearchResultsErrors, GetMovieRemoteSearchResultsData, GetMovieRemoteSearchResultsResponses, GetMovieRemoteSearchResultsErrors, GetMusicAlbumRemoteSearchResultsData, GetMusicAlbumRemoteSearchResultsResponses, GetMusicAlbumRemoteSearchResultsErrors, GetMusicArtistRemoteSearchResultsData, GetMusicArtistRemoteSearchResultsResponses, GetMusicArtistRemoteSearchResultsErrors, GetMusicVideoRemoteSearchResultsData, GetMusicVideoRemoteSearchResultsResponses, GetMusicVideoRemoteSearchResultsErrors, GetPersonRemoteSearchResultsData, GetPersonRemoteSearchResultsResponses, GetPersonRemoteSearchResultsErrors, GetSeriesRemoteSearchResultsData, GetSeriesRemoteSearchResultsResponses, GetSeriesRemoteSearchResultsErrors, GetTrailerRemoteSearchResultsData, GetTrailerRemoteSearchResultsResponses, GetTrailerRemoteSearchResultsErrors, RefreshItemData, RefreshItemResponses, RefreshItemErrors, DeleteItemsData, DeleteItemsResponses, DeleteItemsErrors, GetItemsData, GetItemsResponses, GetItemsErrors, GetItemUserDataData, GetItemUserDataResponses, GetItemUserDataErrors, UpdateItemUserDataData, UpdateItemUserDataResponses, UpdateItemUserDataErrors, GetResumeItemsData, GetResumeItemsResponses, GetResumeItemsErrors, DeleteItemData, DeleteItemResponses, DeleteItemErrors, GetItemData, GetItemResponses, GetItemErrors, UpdateItemData, UpdateItemResponses, UpdateItemErrors, UpdateItemContentTypeData, UpdateItemContentTypeResponses, UpdateItemContentTypeErrors, GetMetadataEditorInfoData, GetMetadataEditorInfoResponses, GetMetadataEditorInfoErrors, GetSimilarAlbumsData, GetSimilarAlbumsResponses, GetSimilarAlbumsErrors, GetSimilarArtistsData, GetSimilarArtistsResponses, GetSimilarArtistsErrors, GetAncestorsData, GetAncestorsResponses, GetAncestorsErrors, GetCriticReviewsData, GetCriticReviewsResponses, GetCriticReviewsErrors, GetDownloadData, GetDownloadResponses, GetDownloadErrors, GetFileData, GetFileResponses, GetFileErrors, GetSimilarItemsData, GetSimilarItemsResponses, GetSimilarItemsErrors, GetThemeMediaData, GetThemeMediaResponses, GetThemeMediaErrors, GetThemeSongsData, GetThemeSongsResponses, GetThemeSongsErrors, GetThemeVideosData, GetThemeVideosResponses, GetThemeVideosErrors, GetItemCountsData, GetItemCountsResponses, GetItemCountsErrors, GetLibraryOptionsInfoData, GetLibraryOptionsInfoResponses, GetLibraryOptionsInfoErrors, PostUpdatedMediaData, PostUpdatedMediaResponses, PostUpdatedMediaErrors, GetMediaFoldersData, GetMediaFoldersResponses, GetMediaFoldersErrors, PostAddedMoviesData, PostAddedMoviesResponses, PostAddedMoviesErrors, PostUpdatedMoviesData, PostUpdatedMoviesResponses, PostUpdatedMoviesErrors, GetPhysicalPathsData, GetPhysicalPathsResponses, GetPhysicalPathsErrors, RefreshLibraryData, RefreshLibraryResponses, RefreshLibraryErrors, PostAddedSeriesData, PostAddedSeriesResponses, PostAddedSeriesErrors, PostUpdatedSeriesData, PostUpdatedSeriesResponses, PostUpdatedSeriesErrors, GetSimilarMoviesData, GetSimilarMoviesResponses, GetSimilarMoviesErrors, GetSimilarShowsData, GetSimilarShowsResponses, GetSimilarShowsErrors, GetSimilarTrailersData, GetSimilarTrailersResponses, GetSimilarTrailersErrors, RemoveVirtualFolderData, RemoveVirtualFolderResponses, RemoveVirtualFolderErrors, GetVirtualFoldersData, GetVirtualFoldersResponses, GetVirtualFoldersErrors, AddVirtualFolderData, AddVirtualFolderResponses, AddVirtualFolderErrors, UpdateLibraryOptionsData, UpdateLibraryOptionsResponses, UpdateLibraryOptionsErrors, RenameVirtualFolderData, RenameVirtualFolderResponses, RenameVirtualFolderErrors, RemoveMediaPathData, RemoveMediaPathResponses, RemoveMediaPathErrors, AddMediaPathData, AddMediaPathResponses, AddMediaPathErrors, UpdateMediaPathData, UpdateMediaPathResponses, UpdateMediaPathErrors, GetChannelMappingOptionsData, GetChannelMappingOptionsResponses, GetChannelMappingOptionsErrors, SetChannelMappingData, SetChannelMappingResponses, SetChannelMappingErrors, GetLiveTvChannelsData, GetLiveTvChannelsResponses, GetLiveTvChannelsErrors, GetChannelData, GetChannelResponses, GetChannelErrors, GetGuideInfoData, GetGuideInfoResponses, GetGuideInfoErrors, GetLiveTvInfoData, GetLiveTvInfoResponses, GetLiveTvInfoErrors, DeleteListingProviderData, DeleteListingProviderResponses, DeleteListingProviderErrors, AddListingProviderData, AddListingProviderResponses, AddListingProviderErrors, GetDefaultListingProviderData, GetDefaultListingProviderResponses, GetDefaultListingProviderErrors, GetLineupsData, GetLineupsResponses, GetLineupsErrors, GetSchedulesDirectCountriesData, GetSchedulesDirectCountriesResponses, GetSchedulesDirectCountriesErrors, GetLiveRecordingFileData, GetLiveRecordingFileResponses, GetLiveRecordingFileErrors, GetLiveStreamFileData, GetLiveStreamFileResponses, GetLiveStreamFileErrors, GetLiveTvProgramsData, GetLiveTvProgramsResponses, GetLiveTvProgramsErrors, GetProgramsData, GetProgramsResponses, GetProgramsErrors, GetProgramData, GetProgramResponses, GetProgramErrors, GetRecommendedProgramsData, GetRecommendedProgramsResponses, GetRecommendedProgramsErrors, GetRecordingsData, GetRecordingsResponses, GetRecordingsErrors, DeleteRecordingData, DeleteRecordingResponses, DeleteRecordingErrors, GetRecordingData, GetRecordingResponses, GetRecordingErrors, GetRecordingFoldersData, GetRecordingFoldersResponses, GetRecordingFoldersErrors, GetRecordingGroupsData, GetRecordingGroupsResponses, GetRecordingGroupsErrors, GetRecordingGroupData, GetRecordingGroupErrors, GetRecordingsSeriesData, GetRecordingsSeriesResponses, GetRecordingsSeriesErrors, GetSeriesTimersData, GetSeriesTimersResponses, GetSeriesTimersErrors, CreateSeriesTimerData, CreateSeriesTimerResponses, CreateSeriesTimerErrors, CancelSeriesTimerData, CancelSeriesTimerResponses, CancelSeriesTimerErrors, GetSeriesTimerData, GetSeriesTimerResponses, GetSeriesTimerErrors, UpdateSeriesTimerData, UpdateSeriesTimerResponses, UpdateSeriesTimerErrors, GetTimersData, GetTimersResponses, GetTimersErrors, CreateTimerData, CreateTimerResponses, CreateTimerErrors, CancelTimerData, CancelTimerResponses, CancelTimerErrors, GetTimerData, GetTimerResponses, GetTimerErrors, UpdateTimerData, UpdateTimerResponses, UpdateTimerErrors, GetDefaultTimerData, GetDefaultTimerResponses, GetDefaultTimerErrors, DeleteTunerHostData, DeleteTunerHostResponses, DeleteTunerHostErrors, AddTunerHostData, AddTunerHostResponses, AddTunerHostErrors, GetTunerHostTypesData, GetTunerHostTypesResponses, GetTunerHostTypesErrors, ResetTunerData, ResetTunerResponses, ResetTunerErrors, DiscoverTunersData, DiscoverTunersResponses, DiscoverTunersErrors, DiscvoverTunersData, DiscvoverTunersResponses, DiscvoverTunersErrors, GetCountriesData, GetCountriesResponses, GetCountriesErrors, GetCulturesData, GetCulturesResponses, GetCulturesErrors, GetLocalizationOptionsData, GetLocalizationOptionsResponses, GetLocalizationOptionsErrors, GetParentalRatingsData, GetParentalRatingsResponses, GetParentalRatingsErrors, DeleteLyricsData, DeleteLyricsResponses, DeleteLyricsErrors, GetLyricsData, GetLyricsResponses, GetLyricsErrors, UploadLyricsData, UploadLyricsResponses, UploadLyricsErrors, SearchRemoteLyricsData, SearchRemoteLyricsResponses, SearchRemoteLyricsErrors, DownloadRemoteLyricsData, DownloadRemoteLyricsResponses, DownloadRemoteLyricsErrors, GetRemoteLyricsData, GetRemoteLyricsResponses, GetRemoteLyricsErrors, GetPlaybackInfoData, GetPlaybackInfoResponses, GetPlaybackInfoErrors, GetPostedPlaybackInfoData, GetPostedPlaybackInfoResponses, GetPostedPlaybackInfoErrors, CloseLiveStreamData, CloseLiveStreamResponses, CloseLiveStreamErrors, OpenLiveStreamData, OpenLiveStreamResponses, OpenLiveStreamErrors, GetBitrateTestBytesData, GetBitrateTestBytesResponses, GetBitrateTestBytesErrors, GetItemSegmentsData, GetItemSegmentsResponses, GetItemSegmentsErrors, GetMovieRecommendationsData, GetMovieRecommendationsResponses, GetMovieRecommendationsErrors, GetMusicGenresData, GetMusicGenresResponses, GetMusicGenresErrors, GetMusicGenreData, GetMusicGenreResponses, GetMusicGenreErrors, GetPackagesData, GetPackagesResponses, GetPackagesErrors, GetPackageInfoData, GetPackageInfoResponses, GetPackageInfoErrors, InstallPackageData, InstallPackageResponses, InstallPackageErrors, CancelPackageInstallationData, CancelPackageInstallationResponses, CancelPackageInstallationErrors, GetRepositoriesData, GetRepositoriesResponses, GetRepositoriesErrors, SetRepositoriesData, SetRepositoriesResponses, SetRepositoriesErrors, GetPersonsData, GetPersonsResponses, GetPersonsErrors, GetPersonData, GetPersonResponses, GetPersonErrors, GetBreakdownReportData, GetBreakdownReportResponses, GetBreakdownReportErrors, GetUserReportDataData, GetUserReportDataResponses, GetUserReportDataErrors, GetDurationHistogramReportData, GetDurationHistogramReportResponses, GetDurationHistogramReportErrors, GetTvShowsReportData, GetTvShowsReportResponses, GetTvShowsReportErrors, GetHourlyReportData, GetHourlyReportResponses, GetHourlyReportErrors, LoadBackupData, LoadBackupResponses, LoadBackupErrors, GetMovieReportData, GetMovieReportResponses, GetMovieReportErrors, GetUsageStatsData, GetUsageStatsResponses, GetUsageStatsErrors, SaveBackupData, SaveBackupResponses, SaveBackupErrors, CustomQueryData2, CustomQueryResponses, CustomQueryErrors, GetTypeFilterListData, GetTypeFilterListResponses, GetTypeFilterListErrors, GetUserReportData, GetUserReportResponses, GetUserReportErrors, GetJellyfinUsersData, GetJellyfinUsersResponses, GetJellyfinUsersErrors, IgnoreListAddData, IgnoreListAddResponses, IgnoreListAddErrors, PruneUnknownUsersData, PruneUnknownUsersResponses, PruneUnknownUsersErrors, IgnoreListRemoveData, IgnoreListRemoveResponses, IgnoreListRemoveErrors, CreatePlaylistData, CreatePlaylistResponses, CreatePlaylistErrors, GetPlaylistData, GetPlaylistResponses, GetPlaylistErrors, UpdatePlaylistData, UpdatePlaylistResponses, UpdatePlaylistErrors, RemoveItemFromPlaylistData, RemoveItemFromPlaylistResponses, RemoveItemFromPlaylistErrors, GetPlaylistItemsData, GetPlaylistItemsResponses, GetPlaylistItemsErrors, AddItemToPlaylistData, AddItemToPlaylistResponses, AddItemToPlaylistErrors, MoveItemData, MoveItemResponses, MoveItemErrors, GetPlaylistUsersData, GetPlaylistUsersResponses, GetPlaylistUsersErrors, RemoveUserFromPlaylistData, RemoveUserFromPlaylistResponses, RemoveUserFromPlaylistErrors, GetPlaylistUserData, GetPlaylistUserResponses, GetPlaylistUserErrors, UpdatePlaylistUserData, UpdatePlaylistUserResponses, UpdatePlaylistUserErrors, OnPlaybackStoppedData, OnPlaybackStoppedResponses, OnPlaybackStoppedErrors, OnPlaybackStartData, OnPlaybackStartResponses, OnPlaybackStartErrors, OnPlaybackProgressData, OnPlaybackProgressResponses, OnPlaybackProgressErrors, ReportPlaybackStartData, ReportPlaybackStartResponses, ReportPlaybackStartErrors, PingPlaybackSessionData, PingPlaybackSessionResponses, PingPlaybackSessionErrors, ReportPlaybackProgressData, ReportPlaybackProgressResponses, ReportPlaybackProgressErrors, ReportPlaybackStoppedData, ReportPlaybackStoppedResponses, ReportPlaybackStoppedErrors, MarkUnplayedItemData, MarkUnplayedItemResponses, MarkUnplayedItemErrors, MarkPlayedItemData, MarkPlayedItemResponses, MarkPlayedItemErrors, GetPluginsData, GetPluginsResponses, GetPluginsErrors, UninstallPluginData, UninstallPluginResponses, UninstallPluginErrors, UninstallPluginByVersionData, UninstallPluginByVersionResponses, UninstallPluginByVersionErrors, DisablePluginData, DisablePluginResponses, DisablePluginErrors, EnablePluginData, EnablePluginResponses, EnablePluginErrors, GetPluginImageData, GetPluginImageResponses, GetPluginImageErrors, GetPluginConfigurationData, GetPluginConfigurationResponses, GetPluginConfigurationErrors, UpdatePluginConfigurationData, UpdatePluginConfigurationResponses, UpdatePluginConfigurationErrors, GetPluginManifestData, GetPluginManifestResponses, GetPluginManifestErrors, AuthorizeQuickConnectData, AuthorizeQuickConnectResponses, AuthorizeQuickConnectErrors, GetQuickConnectStateData, GetQuickConnectStateResponses, GetQuickConnectStateErrors, GetQuickConnectEnabledData, GetQuickConnectEnabledResponses, InitiateQuickConnectData, InitiateQuickConnectResponses, InitiateQuickConnectErrors, GetRemoteImagesData, GetRemoteImagesResponses, GetRemoteImagesErrors, DownloadRemoteImageData, DownloadRemoteImageResponses, DownloadRemoteImageErrors, GetRemoteImageProvidersData, GetRemoteImageProvidersResponses, GetRemoteImageProvidersErrors, GetTasksData, GetTasksResponses, GetTasksErrors, GetTaskData, GetTaskResponses, GetTaskErrors, UpdateTaskData, UpdateTaskResponses, UpdateTaskErrors, StopTaskData, StopTaskResponses, StopTaskErrors, StartTaskData, StartTaskResponses, StartTaskErrors, GetSearchHintsData, GetSearchHintsResponses, GetSearchHintsErrors, GetPasswordResetProvidersData, GetPasswordResetProvidersResponses, GetPasswordResetProvidersErrors, GetAuthProvidersData, GetAuthProvidersResponses, GetAuthProvidersErrors, GetSessionsData, GetSessionsResponses, GetSessionsErrors, SendFullGeneralCommandData, SendFullGeneralCommandResponses, SendFullGeneralCommandErrors, SendGeneralCommandData, SendGeneralCommandResponses, SendGeneralCommandErrors, SendMessageCommandData, SendMessageCommandResponses, SendMessageCommandErrors, PlayData, PlayResponses, PlayErrors, SendPlaystateCommandData, SendPlaystateCommandResponses, SendPlaystateCommandErrors, SendSystemCommandData, SendSystemCommandResponses, SendSystemCommandErrors, RemoveUserFromSessionData, RemoveUserFromSessionResponses, RemoveUserFromSessionErrors, AddUserToSessionData, AddUserToSessionResponses, AddUserToSessionErrors, DisplayContentData, DisplayContentResponses, DisplayContentErrors, PostCapabilitiesData, PostCapabilitiesResponses, PostCapabilitiesErrors, PostFullCapabilitiesData, PostFullCapabilitiesResponses, PostFullCapabilitiesErrors, ReportSessionEndedData, ReportSessionEndedResponses, ReportSessionEndedErrors, ReportViewingData, ReportViewingResponses, ReportViewingErrors, CompleteWizardData, CompleteWizardResponses, CompleteWizardErrors, GetStartupConfigurationData, GetStartupConfigurationResponses, GetStartupConfigurationErrors, UpdateInitialConfigurationData, UpdateInitialConfigurationResponses, UpdateInitialConfigurationErrors, GetFirstUser2Data, GetFirstUser2Responses, GetFirstUser2Errors, SetRemoteAccessData, SetRemoteAccessResponses, SetRemoteAccessErrors, GetFirstUserData, GetFirstUserResponses, GetFirstUserErrors, UpdateStartupUserData, UpdateStartupUserResponses, UpdateStartupUserErrors, GetStudiosData, GetStudiosResponses, GetStudiosErrors, GetStudioData, GetStudioResponses, GetStudioErrors, GetFallbackFontListData, GetFallbackFontListResponses, GetFallbackFontListErrors, GetFallbackFontData, GetFallbackFontResponses, GetFallbackFontErrors, SearchRemoteSubtitlesData, SearchRemoteSubtitlesResponses, SearchRemoteSubtitlesErrors, DownloadRemoteSubtitlesData, DownloadRemoteSubtitlesResponses, DownloadRemoteSubtitlesErrors, GetRemoteSubtitlesData, GetRemoteSubtitlesResponses, GetRemoteSubtitlesErrors, GetSubtitlePlaylistData, GetSubtitlePlaylistResponses, GetSubtitlePlaylistErrors, UploadSubtitleData, UploadSubtitleResponses, UploadSubtitleErrors, DeleteSubtitleData, DeleteSubtitleResponses, DeleteSubtitleErrors, GetSubtitleWithTicksData, GetSubtitleWithTicksResponses, GetSubtitleData, GetSubtitleResponses, GetSuggestionsData, GetSuggestionsResponses, GetSuggestionsErrors, SyncPlayBufferingData, SyncPlayBufferingResponses, SyncPlayBufferingErrors, SyncPlayJoinGroupData, SyncPlayJoinGroupResponses, SyncPlayJoinGroupErrors, SyncPlayLeaveGroupData, SyncPlayLeaveGroupResponses, SyncPlayLeaveGroupErrors, SyncPlayGetGroupsData, SyncPlayGetGroupsResponses, SyncPlayGetGroupsErrors, SyncPlayMovePlaylistItemData, SyncPlayMovePlaylistItemResponses, SyncPlayMovePlaylistItemErrors, SyncPlayCreateGroupData, SyncPlayCreateGroupResponses, SyncPlayCreateGroupErrors, SyncPlayNextItemData, SyncPlayNextItemResponses, SyncPlayNextItemErrors, SyncPlayPauseData, SyncPlayPauseResponses, SyncPlayPauseErrors, SyncPlayPingData, SyncPlayPingResponses, SyncPlayPingErrors, SyncPlayPreviousItemData, SyncPlayPreviousItemResponses, SyncPlayPreviousItemErrors, SyncPlayQueueData, SyncPlayQueueResponses, SyncPlayQueueErrors, SyncPlayReadyData, SyncPlayReadyResponses, SyncPlayReadyErrors, SyncPlayRemoveFromPlaylistData, SyncPlayRemoveFromPlaylistResponses, SyncPlayRemoveFromPlaylistErrors, SyncPlaySeekData, SyncPlaySeekResponses, SyncPlaySeekErrors, SyncPlaySetIgnoreWaitData, SyncPlaySetIgnoreWaitResponses, SyncPlaySetIgnoreWaitErrors, SyncPlaySetNewQueueData, SyncPlaySetNewQueueResponses, SyncPlaySetNewQueueErrors, SyncPlaySetPlaylistItemData, SyncPlaySetPlaylistItemResponses, SyncPlaySetPlaylistItemErrors, SyncPlaySetRepeatModeData, SyncPlaySetRepeatModeResponses, SyncPlaySetRepeatModeErrors, SyncPlaySetShuffleModeData, SyncPlaySetShuffleModeResponses, SyncPlaySetShuffleModeErrors, SyncPlayStopData, SyncPlayStopResponses, SyncPlayStopErrors, SyncPlayUnpauseData, SyncPlayUnpauseResponses, SyncPlayUnpauseErrors, GetEndpointInfoData, GetEndpointInfoResponses, GetEndpointInfoErrors, GetSystemInfoData, GetSystemInfoResponses, GetSystemInfoErrors, GetPublicSystemInfoData, GetPublicSystemInfoResponses, GetServerLogsData, GetServerLogsResponses, GetServerLogsErrors, GetLogFileData, GetLogFileResponses, GetLogFileErrors, GetPingSystemData, GetPingSystemResponses, PostPingSystemData, PostPingSystemResponses, RestartApplicationData, RestartApplicationResponses, RestartApplicationErrors, ShutdownApplicationData, ShutdownApplicationResponses, ShutdownApplicationErrors, GetWakeOnLanInfoData, GetWakeOnLanInfoResponses, GetWakeOnLanInfoErrors, GetUtcTimeData, GetUtcTimeResponses, TmdbClientConfigurationData, TmdbClientConfigurationResponses, TmdbClientConfigurationErrors, GetTrailersData, GetTrailersResponses, GetTrailersErrors, GetTrickplayTileImageData, GetTrickplayTileImageResponses, GetTrickplayTileImageErrors, GetTrickplayHlsPlaylistData, GetTrickplayHlsPlaylistResponses, GetTrickplayHlsPlaylistErrors, GetEpisodesData, GetEpisodesResponses, GetEpisodesErrors, GetSeasonsData, GetSeasonsResponses, GetSeasonsErrors, GetNextUpData, GetNextUpResponses, GetNextUpErrors, GetUpcomingEpisodesData, GetUpcomingEpisodesResponses, GetUpcomingEpisodesErrors, GetUniversalAudioStreamData, GetUniversalAudioStreamResponses, GetUniversalAudioStreamErrors, HeadUniversalAudioStreamData, HeadUniversalAudioStreamResponses, HeadUniversalAudioStreamErrors, GetUsersData, GetUsersResponses, GetUsersErrors, UpdateUserData, UpdateUserResponses, UpdateUserErrors, DeleteUserData, DeleteUserResponses, DeleteUserErrors, GetUserByIdData, GetUserByIdResponses, GetUserByIdErrors, UpdateUserPolicyData, UpdateUserPolicyResponses, UpdateUserPolicyErrors, AuthenticateUserByNameData, AuthenticateUserByNameResponses, AuthenticateWithQuickConnectData, AuthenticateWithQuickConnectResponses, AuthenticateWithQuickConnectErrors, UpdateUserConfigurationData, UpdateUserConfigurationResponses, UpdateUserConfigurationErrors, ForgotPasswordData, ForgotPasswordResponses, ForgotPasswordPinData, ForgotPasswordPinResponses, GetCurrentUserData, GetCurrentUserResponses, GetCurrentUserErrors, CreateUserByNameData, CreateUserByNameResponses, CreateUserByNameErrors, UpdateUserPasswordData, UpdateUserPasswordResponses, UpdateUserPasswordErrors, GetPublicUsersData, GetPublicUsersResponses, GetIntrosData, GetIntrosResponses, GetIntrosErrors, GetLocalTrailersData, GetLocalTrailersResponses, GetLocalTrailersErrors, GetSpecialFeaturesData, GetSpecialFeaturesResponses, GetSpecialFeaturesErrors, GetLatestMediaData, GetLatestMediaResponses, GetLatestMediaErrors, GetRootFolderData, GetRootFolderResponses, GetRootFolderErrors, UnmarkFavoriteItemData, UnmarkFavoriteItemResponses, UnmarkFavoriteItemErrors, MarkFavoriteItemData, MarkFavoriteItemResponses, MarkFavoriteItemErrors, DeleteUserItemRatingData, DeleteUserItemRatingResponses, DeleteUserItemRatingErrors, UpdateUserItemRatingData, UpdateUserItemRatingResponses, UpdateUserItemRatingErrors, GetUserViewsData, GetUserViewsResponses, GetUserViewsErrors, GetGroupingOptionsData, GetGroupingOptionsResponses, GetGroupingOptionsErrors, GetAttachmentData, GetAttachmentResponses, GetAttachmentErrors, GetAdditionalPartData, GetAdditionalPartResponses, GetAdditionalPartErrors, DeleteAlternateSourcesData, DeleteAlternateSourcesResponses, DeleteAlternateSourcesErrors, GetVideoStreamData, GetVideoStreamResponses, HeadVideoStreamData, HeadVideoStreamResponses, GetVideoStreamByContainerData, GetVideoStreamByContainerResponses, HeadVideoStreamByContainerData, HeadVideoStreamByContainerResponses, MergeVersionsData, MergeVersionsResponses, MergeVersionsErrors, GetYearsData, GetYearsResponses, GetYearsErrors, GetYearData, GetYearResponses, GetYearErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Gets activity log entries.
 */
export const getLogEntries = <ThrowOnError extends boolean = false>(options?: Options<GetLogEntriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLogEntriesResponses, GetLogEntriesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/System/ActivityLog/Entries',
        ...options
    });
};

/**
 * Get all keys.
 */
export const getKeys = <ThrowOnError extends boolean = false>(options?: Options<GetKeysData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetKeysResponses, GetKeysErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Auth/Keys',
        ...options
    });
};

/**
 * Create a new api key.
 */
export const createKey = <ThrowOnError extends boolean = false>(options: Options<CreateKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateKeyResponses, CreateKeyErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Auth/Keys',
        ...options
    });
};

/**
 * Remove an api key.
 */
export const revokeKey = <ThrowOnError extends boolean = false>(options: Options<RevokeKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RevokeKeyResponses, RevokeKeyErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Auth/Keys/{key}',
        ...options
    });
};

/**
 * Gets all artists from a given item, folder, or the entire library.
 */
export const getArtists = <ThrowOnError extends boolean = false>(options?: Options<GetArtistsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetArtistsResponses, GetArtistsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Artists',
        ...options
    });
};

/**
 * Gets an artist by name.
 */
export const getArtistByName = <ThrowOnError extends boolean = false>(options: Options<GetArtistByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetArtistByNameResponses, GetArtistByNameErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Artists/{name}',
        ...options
    });
};

/**
 * Gets all album artists from a given item, folder, or the entire library.
 */
export const getAlbumArtists = <ThrowOnError extends boolean = false>(options?: Options<GetAlbumArtistsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAlbumArtistsResponses, GetAlbumArtistsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Artists/AlbumArtists',
        ...options
    });
};

/**
 * Gets an audio stream.
 */
export const getAudioStream = <ThrowOnError extends boolean = false>(options: Options<GetAudioStreamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAudioStreamResponses, unknown, ThrowOnError>({
        url: '/Audio/{itemId}/stream',
        ...options
    });
};

/**
 * Gets an audio stream.
 */
export const headAudioStream = <ThrowOnError extends boolean = false>(options: Options<HeadAudioStreamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).head<HeadAudioStreamResponses, unknown, ThrowOnError>({
        url: '/Audio/{itemId}/stream',
        ...options
    });
};

/**
 * Gets an audio stream.
 */
export const getAudioStreamByContainer = <ThrowOnError extends boolean = false>(options: Options<GetAudioStreamByContainerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAudioStreamByContainerResponses, unknown, ThrowOnError>({
        url: '/Audio/{itemId}/stream.{container}',
        ...options
    });
};

/**
 * Gets an audio stream.
 */
export const headAudioStreamByContainer = <ThrowOnError extends boolean = false>(options: Options<HeadAudioStreamByContainerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).head<HeadAudioStreamByContainerResponses, unknown, ThrowOnError>({
        url: '/Audio/{itemId}/stream.{container}',
        ...options
    });
};

/**
 * Gets branding configuration.
 */
export const getBrandingOptions = <ThrowOnError extends boolean = false>(options?: Options<GetBrandingOptionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetBrandingOptionsResponses, unknown, ThrowOnError>({
        url: '/Branding/Configuration',
        ...options
    });
};

/**
 * Gets branding css.
 */
export const getBrandingCss = <ThrowOnError extends boolean = false>(options?: Options<GetBrandingCssData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetBrandingCssResponses, unknown, ThrowOnError>({
        url: '/Branding/Css',
        ...options
    });
};

/**
 * Gets branding css.
 */
export const getBrandingCss2 = <ThrowOnError extends boolean = false>(options?: Options<GetBrandingCss2Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetBrandingCss2Responses, unknown, ThrowOnError>({
        url: '/Branding/Css.css',
        ...options
    });
};

/**
 * Gets available channels.
 */
export const getChannels = <ThrowOnError extends boolean = false>(options?: Options<GetChannelsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetChannelsResponses, GetChannelsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Channels',
        ...options
    });
};

/**
 * Get channel features.
 */
export const getChannelFeatures = <ThrowOnError extends boolean = false>(options: Options<GetChannelFeaturesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChannelFeaturesResponses, GetChannelFeaturesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Channels/{channelId}/Features',
        ...options
    });
};

/**
 * Get channel items.
 */
export const getChannelItems = <ThrowOnError extends boolean = false>(options: Options<GetChannelItemsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChannelItemsResponses, GetChannelItemsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Channels/{channelId}/Items',
        ...options
    });
};

/**
 * Get all channel features.
 */
export const getAllChannelFeatures = <ThrowOnError extends boolean = false>(options?: Options<GetAllChannelFeaturesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllChannelFeaturesResponses, GetAllChannelFeaturesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Channels/Features',
        ...options
    });
};

/**
 * Gets latest channel items.
 */
export const getLatestChannelItems = <ThrowOnError extends boolean = false>(options?: Options<GetLatestChannelItemsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLatestChannelItemsResponses, GetLatestChannelItemsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Channels/Items/Latest',
        ...options
    });
};

/**
 * Upload a document.
 */
export const logFile = <ThrowOnError extends boolean = false>(options?: Options<LogFileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LogFileResponses, LogFileErrors, ThrowOnError>({
        bodySerializer: null,
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/ClientLog/Document',
        ...options,
        headers: {
            'Content-Type': 'text/plain',
            ...options?.headers
        }
    });
};

/**
 * Creates a new collection.
 */
export const createCollection = <ThrowOnError extends boolean = false>(options?: Options<CreateCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateCollectionResponses, CreateCollectionErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Collections',
        ...options
    });
};

/**
 * Removes items from a collection.
 */
export const removeFromCollection = <ThrowOnError extends boolean = false>(options: Options<RemoveFromCollectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveFromCollectionResponses, RemoveFromCollectionErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Collections/{collectionId}/Items',
        ...options
    });
};

/**
 * Adds items to a collection.
 */
export const addToCollection = <ThrowOnError extends boolean = false>(options: Options<AddToCollectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddToCollectionResponses, AddToCollectionErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Collections/{collectionId}/Items',
        ...options
    });
};

/**
 * Gets application configuration.
 */
export const getConfiguration = <ThrowOnError extends boolean = false>(options?: Options<GetConfigurationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigurationResponses, GetConfigurationErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/System/Configuration',
        ...options
    });
};

/**
 * Updates application configuration.
 */
export const updateConfiguration = <ThrowOnError extends boolean = false>(options: Options<UpdateConfigurationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateConfigurationResponses, UpdateConfigurationErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/System/Configuration',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets a named configuration.
 */
export const getNamedConfiguration = <ThrowOnError extends boolean = false>(options: Options<GetNamedConfigurationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNamedConfigurationResponses, GetNamedConfigurationErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/System/Configuration/{key}',
        ...options
    });
};

/**
 * Updates named configuration.
 */
export const updateNamedConfiguration = <ThrowOnError extends boolean = false>(options: Options<UpdateNamedConfigurationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateNamedConfigurationResponses, UpdateNamedConfigurationErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/System/Configuration/{key}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets a default MetadataOptions object.
 */
export const getDefaultMetadataOptions = <ThrowOnError extends boolean = false>(options?: Options<GetDefaultMetadataOptionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDefaultMetadataOptionsResponses, GetDefaultMetadataOptionsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/System/Configuration/MetadataOptions/Default',
        ...options
    });
};

/**
 * Gets a dashboard configuration page.
 */
export const getDashboardConfigurationPage = <ThrowOnError extends boolean = false>(options?: Options<GetDashboardConfigurationPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDashboardConfigurationPageResponses, GetDashboardConfigurationPageErrors, ThrowOnError>({
        url: '/web/ConfigurationPage',
        ...options
    });
};

/**
 * Gets the configuration pages.
 */
export const getConfigurationPages = <ThrowOnError extends boolean = false>(options?: Options<GetConfigurationPagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigurationPagesResponses, GetConfigurationPagesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/web/ConfigurationPages',
        ...options
    });
};

/**
 * Deletes a device.
 */
export const deleteDevice = <ThrowOnError extends boolean = false>(options: Options<DeleteDeviceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDeviceResponses, DeleteDeviceErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Devices',
        ...options
    });
};

/**
 * Get Devices.
 */
export const getDevices = <ThrowOnError extends boolean = false>(options?: Options<GetDevicesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDevicesResponses, GetDevicesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Devices',
        ...options
    });
};

/**
 * Get info for a device.
 */
export const getDeviceInfo = <ThrowOnError extends boolean = false>(options: Options<GetDeviceInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDeviceInfoResponses, GetDeviceInfoErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Devices/Info',
        ...options
    });
};

/**
 * Get options for a device.
 */
export const getDeviceOptions = <ThrowOnError extends boolean = false>(options: Options<GetDeviceOptionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDeviceOptionsResponses, GetDeviceOptionsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Devices/Options',
        ...options
    });
};

/**
 * Update device options.
 */
export const updateDeviceOptions = <ThrowOnError extends boolean = false>(options: Options<UpdateDeviceOptionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateDeviceOptionsResponses, UpdateDeviceOptionsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Devices/Options',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Display Preferences.
 */
export const getDisplayPreferences = <ThrowOnError extends boolean = false>(options: Options<GetDisplayPreferencesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDisplayPreferencesResponses, GetDisplayPreferencesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/DisplayPreferences/{displayPreferencesId}',
        ...options
    });
};

/**
 * Update Display Preferences.
 */
export const updateDisplayPreferences = <ThrowOnError extends boolean = false>(options: Options<UpdateDisplayPreferencesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateDisplayPreferencesResponses, UpdateDisplayPreferencesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/DisplayPreferences/{displayPreferencesId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets a video stream using HTTP live streaming.
 */
export const getHlsAudioSegment = <ThrowOnError extends boolean = false>(options: Options<GetHlsAudioSegmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetHlsAudioSegmentResponses, GetHlsAudioSegmentErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Audio/{itemId}/hls1/{playlistId}/{segmentId}.{container}',
        ...options
    });
};

/**
 * Gets an audio stream using HTTP live streaming.
 */
export const getVariantHlsAudioPlaylist = <ThrowOnError extends boolean = false>(options: Options<GetVariantHlsAudioPlaylistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVariantHlsAudioPlaylistResponses, GetVariantHlsAudioPlaylistErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Audio/{itemId}/main.m3u8',
        ...options
    });
};

/**
 * Gets an audio hls playlist stream.
 */
export const getMasterHlsAudioPlaylist = <ThrowOnError extends boolean = false>(options: Options<GetMasterHlsAudioPlaylistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMasterHlsAudioPlaylistResponses, GetMasterHlsAudioPlaylistErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Audio/{itemId}/master.m3u8',
        ...options
    });
};

/**
 * Gets an audio hls playlist stream.
 */
export const headMasterHlsAudioPlaylist = <ThrowOnError extends boolean = false>(options: Options<HeadMasterHlsAudioPlaylistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).head<HeadMasterHlsAudioPlaylistResponses, HeadMasterHlsAudioPlaylistErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Audio/{itemId}/master.m3u8',
        ...options
    });
};

/**
 * Gets a video stream using HTTP live streaming.
 */
export const getHlsVideoSegment = <ThrowOnError extends boolean = false>(options: Options<GetHlsVideoSegmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetHlsVideoSegmentResponses, GetHlsVideoSegmentErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Videos/{itemId}/hls1/{playlistId}/{segmentId}.{container}',
        ...options
    });
};

/**
 * Gets a hls live stream.
 */
export const getLiveHlsStream = <ThrowOnError extends boolean = false>(options: Options<GetLiveHlsStreamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLiveHlsStreamResponses, GetLiveHlsStreamErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Videos/{itemId}/live.m3u8',
        ...options
    });
};

/**
 * Gets a video stream using HTTP live streaming.
 */
export const getVariantHlsVideoPlaylist = <ThrowOnError extends boolean = false>(options: Options<GetVariantHlsVideoPlaylistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVariantHlsVideoPlaylistResponses, GetVariantHlsVideoPlaylistErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Videos/{itemId}/main.m3u8',
        ...options
    });
};

/**
 * Gets a video hls playlist stream.
 */
export const getMasterHlsVideoPlaylist = <ThrowOnError extends boolean = false>(options: Options<GetMasterHlsVideoPlaylistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMasterHlsVideoPlaylistResponses, GetMasterHlsVideoPlaylistErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Videos/{itemId}/master.m3u8',
        ...options
    });
};

/**
 * Gets a video hls playlist stream.
 */
export const headMasterHlsVideoPlaylist = <ThrowOnError extends boolean = false>(options: Options<HeadMasterHlsVideoPlaylistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).head<HeadMasterHlsVideoPlaylistResponses, HeadMasterHlsVideoPlaylistErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Videos/{itemId}/master.m3u8',
        ...options
    });
};

/**
 * Get Default directory browser.
 */
export const getDefaultDirectoryBrowser = <ThrowOnError extends boolean = false>(options?: Options<GetDefaultDirectoryBrowserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDefaultDirectoryBrowserResponses, GetDefaultDirectoryBrowserErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Environment/DefaultDirectoryBrowser',
        ...options
    });
};

/**
 * Gets the contents of a given directory in the file system.
 */
export const getDirectoryContents = <ThrowOnError extends boolean = false>(options: Options<GetDirectoryContentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDirectoryContentsResponses, GetDirectoryContentsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Environment/DirectoryContents',
        ...options
    });
};

/**
 * Gets available drives from the server's file system.
 */
export const getDrives = <ThrowOnError extends boolean = false>(options?: Options<GetDrivesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDrivesResponses, GetDrivesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Environment/Drives',
        ...options
    });
};

/**
 * Gets network paths.
 * @deprecated
 */
export const getNetworkShares = <ThrowOnError extends boolean = false>(options?: Options<GetNetworkSharesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNetworkSharesResponses, GetNetworkSharesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Environment/NetworkShares',
        ...options
    });
};

/**
 * Gets the parent path of a given path.
 */
export const getParentPath = <ThrowOnError extends boolean = false>(options: Options<GetParentPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetParentPathResponses, GetParentPathErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Environment/ParentPath',
        ...options
    });
};

/**
 * Validates path.
 */
export const validatePath = <ThrowOnError extends boolean = false>(options: Options<ValidatePathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ValidatePathResponses, ValidatePathErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Environment/ValidatePath',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets legacy query filters.
 */
export const getQueryFiltersLegacy = <ThrowOnError extends boolean = false>(options?: Options<GetQueryFiltersLegacyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetQueryFiltersLegacyResponses, GetQueryFiltersLegacyErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/Filters',
        ...options
    });
};

/**
 * Gets query filters.
 */
export const getQueryFilters = <ThrowOnError extends boolean = false>(options?: Options<GetQueryFiltersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetQueryFiltersResponses, GetQueryFiltersErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/Filters2',
        ...options
    });
};

/**
 * Gets all genres from a given item, folder, or the entire library.
 */
export const getGenres = <ThrowOnError extends boolean = false>(options?: Options<GetGenresData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetGenresResponses, GetGenresErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Genres',
        ...options
    });
};

/**
 * Gets a genre, by name.
 */
export const getGenre = <ThrowOnError extends boolean = false>(options: Options<GetGenreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetGenreResponses, GetGenreErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Genres/{genreName}',
        ...options
    });
};

/**
 * Gets the specified audio segment for an audio item.
 */
export const getHlsAudioSegmentLegacyAac = <ThrowOnError extends boolean = false>(options: Options<GetHlsAudioSegmentLegacyAacData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetHlsAudioSegmentLegacyAacResponses, unknown, ThrowOnError>({
        url: '/Audio/{itemId}/hls/{segmentId}/stream.aac',
        ...options
    });
};

/**
 * Gets the specified audio segment for an audio item.
 */
export const getHlsAudioSegmentLegacyMp3 = <ThrowOnError extends boolean = false>(options: Options<GetHlsAudioSegmentLegacyMp3Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetHlsAudioSegmentLegacyMp3Responses, unknown, ThrowOnError>({
        url: '/Audio/{itemId}/hls/{segmentId}/stream.mp3',
        ...options
    });
};

/**
 * Gets a hls video segment.
 */
export const getHlsVideoSegmentLegacy = <ThrowOnError extends boolean = false>(options: Options<GetHlsVideoSegmentLegacyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetHlsVideoSegmentLegacyResponses, GetHlsVideoSegmentLegacyErrors, ThrowOnError>({
        url: '/Videos/{itemId}/hls/{playlistId}/{segmentId}.{segmentContainer}',
        ...options
    });
};

/**
 * Gets a hls video playlist.
 */
export const getHlsPlaylistLegacy = <ThrowOnError extends boolean = false>(options: Options<GetHlsPlaylistLegacyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetHlsPlaylistLegacyResponses, GetHlsPlaylistLegacyErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Videos/{itemId}/hls/{playlistId}/stream.m3u8',
        ...options
    });
};

/**
 * Stops an active encoding.
 */
export const stopEncodingProcess = <ThrowOnError extends boolean = false>(options: Options<StopEncodingProcessData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<StopEncodingProcessResponses, StopEncodingProcessErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Videos/ActiveEncodings',
        ...options
    });
};

/**
 * Get artist image by name.
 */
export const getArtistImage = <ThrowOnError extends boolean = false>(options: Options<GetArtistImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetArtistImageResponses, GetArtistImageErrors, ThrowOnError>({
        url: '/Artists/{name}/Images/{imageType}/{imageIndex}',
        ...options
    });
};

/**
 * Get artist image by name.
 */
export const headArtistImage = <ThrowOnError extends boolean = false>(options: Options<HeadArtistImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).head<HeadArtistImageResponses, HeadArtistImageErrors, ThrowOnError>({
        url: '/Artists/{name}/Images/{imageType}/{imageIndex}',
        ...options
    });
};

/**
 * Delete a custom splashscreen.
 */
export const deleteCustomSplashscreen = <ThrowOnError extends boolean = false>(options?: Options<DeleteCustomSplashscreenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteCustomSplashscreenResponses, DeleteCustomSplashscreenErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Branding/Splashscreen',
        ...options
    });
};

/**
 * Generates or gets the splashscreen.
 */
export const getSplashscreen = <ThrowOnError extends boolean = false>(options?: Options<GetSplashscreenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSplashscreenResponses, unknown, ThrowOnError>({
        url: '/Branding/Splashscreen',
        ...options
    });
};

/**
 * Uploads a custom splashscreen.
 * The body is expected to the image contents base64 encoded.
 */
export const uploadCustomSplashscreen = <ThrowOnError extends boolean = false>(options?: Options<UploadCustomSplashscreenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UploadCustomSplashscreenResponses, UploadCustomSplashscreenErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Branding/Splashscreen',
        ...options,
        headers: {
            'Content-Type': 'image/*',
            ...options?.headers
        }
    });
};

/**
 * Get genre image by name.
 */
export const getGenreImage = <ThrowOnError extends boolean = false>(options: Options<GetGenreImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetGenreImageResponses, GetGenreImageErrors, ThrowOnError>({
        url: '/Genres/{name}/Images/{imageType}',
        ...options
    });
};

/**
 * Get genre image by name.
 */
export const headGenreImage = <ThrowOnError extends boolean = false>(options: Options<HeadGenreImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).head<HeadGenreImageResponses, HeadGenreImageErrors, ThrowOnError>({
        url: '/Genres/{name}/Images/{imageType}',
        ...options
    });
};

/**
 * Get genre image by name.
 */
export const getGenreImageByIndex = <ThrowOnError extends boolean = false>(options: Options<GetGenreImageByIndexData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetGenreImageByIndexResponses, GetGenreImageByIndexErrors, ThrowOnError>({
        url: '/Genres/{name}/Images/{imageType}/{imageIndex}',
        ...options
    });
};

/**
 * Get genre image by name.
 */
export const headGenreImageByIndex = <ThrowOnError extends boolean = false>(options: Options<HeadGenreImageByIndexData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).head<HeadGenreImageByIndexResponses, HeadGenreImageByIndexErrors, ThrowOnError>({
        url: '/Genres/{name}/Images/{imageType}/{imageIndex}',
        ...options
    });
};

/**
 * Get item image infos.
 */
export const getItemImageInfos = <ThrowOnError extends boolean = false>(options: Options<GetItemImageInfosData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemImageInfosResponses, GetItemImageInfosErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/Images',
        ...options
    });
};

/**
 * Delete an item's image.
 */
export const deleteItemImage = <ThrowOnError extends boolean = false>(options: Options<DeleteItemImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteItemImageResponses, DeleteItemImageErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/Images/{imageType}',
        ...options
    });
};

/**
 * Gets the item's image.
 */
export const getItemImage = <ThrowOnError extends boolean = false>(options: Options<GetItemImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemImageResponses, GetItemImageErrors, ThrowOnError>({
        url: '/Items/{itemId}/Images/{imageType}',
        ...options
    });
};

/**
 * Gets the item's image.
 */
export const headItemImage = <ThrowOnError extends boolean = false>(options: Options<HeadItemImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).head<HeadItemImageResponses, HeadItemImageErrors, ThrowOnError>({
        url: '/Items/{itemId}/Images/{imageType}',
        ...options
    });
};

/**
 * Set item image.
 */
export const setItemImage = <ThrowOnError extends boolean = false>(options: Options<SetItemImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetItemImageResponses, SetItemImageErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/Images/{imageType}',
        ...options,
        headers: {
            'Content-Type': 'image/*',
            ...options.headers
        }
    });
};

/**
 * Delete an item's image.
 */
export const deleteItemImageByIndex = <ThrowOnError extends boolean = false>(options: Options<DeleteItemImageByIndexData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteItemImageByIndexResponses, DeleteItemImageByIndexErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/Images/{imageType}/{imageIndex}',
        ...options
    });
};

/**
 * Gets the item's image.
 */
export const getItemImageByIndex = <ThrowOnError extends boolean = false>(options: Options<GetItemImageByIndexData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemImageByIndexResponses, GetItemImageByIndexErrors, ThrowOnError>({
        url: '/Items/{itemId}/Images/{imageType}/{imageIndex}',
        ...options
    });
};

/**
 * Gets the item's image.
 */
export const headItemImageByIndex = <ThrowOnError extends boolean = false>(options: Options<HeadItemImageByIndexData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).head<HeadItemImageByIndexResponses, HeadItemImageByIndexErrors, ThrowOnError>({
        url: '/Items/{itemId}/Images/{imageType}/{imageIndex}',
        ...options
    });
};

/**
 * Set item image.
 */
export const setItemImageByIndex = <ThrowOnError extends boolean = false>(options: Options<SetItemImageByIndexData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetItemImageByIndexResponses, SetItemImageByIndexErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/Images/{imageType}/{imageIndex}',
        ...options,
        headers: {
            'Content-Type': 'image/*',
            ...options.headers
        }
    });
};

/**
 * Gets the item's image.
 */
export const getItemImage2 = <ThrowOnError extends boolean = false>(options: Options<GetItemImage2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemImage2Responses, GetItemImage2Errors, ThrowOnError>({
        url: '/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}',
        ...options
    });
};

/**
 * Gets the item's image.
 */
export const headItemImage2 = <ThrowOnError extends boolean = false>(options: Options<HeadItemImage2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).head<HeadItemImage2Responses, HeadItemImage2Errors, ThrowOnError>({
        url: '/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}',
        ...options
    });
};

/**
 * Updates the index for an item image.
 */
export const updateItemImageIndex = <ThrowOnError extends boolean = false>(options: Options<UpdateItemImageIndexData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateItemImageIndexResponses, UpdateItemImageIndexErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/Images/{imageType}/{imageIndex}/Index',
        ...options
    });
};

/**
 * Get music genre image by name.
 */
export const getMusicGenreImage = <ThrowOnError extends boolean = false>(options: Options<GetMusicGenreImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMusicGenreImageResponses, GetMusicGenreImageErrors, ThrowOnError>({
        url: '/MusicGenres/{name}/Images/{imageType}',
        ...options
    });
};

/**
 * Get music genre image by name.
 */
export const headMusicGenreImage = <ThrowOnError extends boolean = false>(options: Options<HeadMusicGenreImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).head<HeadMusicGenreImageResponses, HeadMusicGenreImageErrors, ThrowOnError>({
        url: '/MusicGenres/{name}/Images/{imageType}',
        ...options
    });
};

/**
 * Get music genre image by name.
 */
export const getMusicGenreImageByIndex = <ThrowOnError extends boolean = false>(options: Options<GetMusicGenreImageByIndexData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMusicGenreImageByIndexResponses, GetMusicGenreImageByIndexErrors, ThrowOnError>({
        url: '/MusicGenres/{name}/Images/{imageType}/{imageIndex}',
        ...options
    });
};

/**
 * Get music genre image by name.
 */
export const headMusicGenreImageByIndex = <ThrowOnError extends boolean = false>(options: Options<HeadMusicGenreImageByIndexData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).head<HeadMusicGenreImageByIndexResponses, HeadMusicGenreImageByIndexErrors, ThrowOnError>({
        url: '/MusicGenres/{name}/Images/{imageType}/{imageIndex}',
        ...options
    });
};

/**
 * Get person image by name.
 */
export const getPersonImage = <ThrowOnError extends boolean = false>(options: Options<GetPersonImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPersonImageResponses, GetPersonImageErrors, ThrowOnError>({
        url: '/Persons/{name}/Images/{imageType}',
        ...options
    });
};

/**
 * Get person image by name.
 */
export const headPersonImage = <ThrowOnError extends boolean = false>(options: Options<HeadPersonImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).head<HeadPersonImageResponses, HeadPersonImageErrors, ThrowOnError>({
        url: '/Persons/{name}/Images/{imageType}',
        ...options
    });
};

/**
 * Get person image by name.
 */
export const getPersonImageByIndex = <ThrowOnError extends boolean = false>(options: Options<GetPersonImageByIndexData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPersonImageByIndexResponses, GetPersonImageByIndexErrors, ThrowOnError>({
        url: '/Persons/{name}/Images/{imageType}/{imageIndex}',
        ...options
    });
};

/**
 * Get person image by name.
 */
export const headPersonImageByIndex = <ThrowOnError extends boolean = false>(options: Options<HeadPersonImageByIndexData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).head<HeadPersonImageByIndexResponses, HeadPersonImageByIndexErrors, ThrowOnError>({
        url: '/Persons/{name}/Images/{imageType}/{imageIndex}',
        ...options
    });
};

/**
 * Get studio image by name.
 */
export const getStudioImage = <ThrowOnError extends boolean = false>(options: Options<GetStudioImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStudioImageResponses, GetStudioImageErrors, ThrowOnError>({
        url: '/Studios/{name}/Images/{imageType}',
        ...options
    });
};

/**
 * Get studio image by name.
 */
export const headStudioImage = <ThrowOnError extends boolean = false>(options: Options<HeadStudioImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).head<HeadStudioImageResponses, HeadStudioImageErrors, ThrowOnError>({
        url: '/Studios/{name}/Images/{imageType}',
        ...options
    });
};

/**
 * Get studio image by name.
 */
export const getStudioImageByIndex = <ThrowOnError extends boolean = false>(options: Options<GetStudioImageByIndexData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStudioImageByIndexResponses, GetStudioImageByIndexErrors, ThrowOnError>({
        url: '/Studios/{name}/Images/{imageType}/{imageIndex}',
        ...options
    });
};

/**
 * Get studio image by name.
 */
export const headStudioImageByIndex = <ThrowOnError extends boolean = false>(options: Options<HeadStudioImageByIndexData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).head<HeadStudioImageByIndexResponses, HeadStudioImageByIndexErrors, ThrowOnError>({
        url: '/Studios/{name}/Images/{imageType}/{imageIndex}',
        ...options
    });
};

/**
 * Delete the user's image.
 */
export const deleteUserImage = <ThrowOnError extends boolean = false>(options?: Options<DeleteUserImageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteUserImageResponses, DeleteUserImageErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/UserImage',
        ...options
    });
};

/**
 * Get user profile image.
 */
export const getUserImage = <ThrowOnError extends boolean = false>(options?: Options<GetUserImageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserImageResponses, GetUserImageErrors, ThrowOnError>({
        url: '/UserImage',
        ...options
    });
};

/**
 * Get user profile image.
 */
export const headUserImage = <ThrowOnError extends boolean = false>(options?: Options<HeadUserImageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).head<HeadUserImageResponses, HeadUserImageErrors, ThrowOnError>({
        url: '/UserImage',
        ...options
    });
};

/**
 * Sets the user image.
 */
export const postUserImage = <ThrowOnError extends boolean = false>(options?: Options<PostUserImageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUserImageResponses, PostUserImageErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/UserImage',
        ...options,
        headers: {
            'Content-Type': 'image/*',
            ...options?.headers
        }
    });
};

/**
 * Creates an instant playlist based on a given album.
 */
export const getInstantMixFromAlbum = <ThrowOnError extends boolean = false>(options: Options<GetInstantMixFromAlbumData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetInstantMixFromAlbumResponses, GetInstantMixFromAlbumErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Albums/{itemId}/InstantMix',
        ...options
    });
};

/**
 * Creates an instant playlist based on a given artist.
 */
export const getInstantMixFromArtists = <ThrowOnError extends boolean = false>(options: Options<GetInstantMixFromArtistsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetInstantMixFromArtistsResponses, GetInstantMixFromArtistsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Artists/{itemId}/InstantMix',
        ...options
    });
};

/**
 * Creates an instant playlist based on a given artist.
 * @deprecated
 */
export const getInstantMixFromArtists2 = <ThrowOnError extends boolean = false>(options: Options<GetInstantMixFromArtists2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetInstantMixFromArtists2Responses, GetInstantMixFromArtists2Errors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Artists/InstantMix',
        ...options
    });
};

/**
 * Creates an instant playlist based on a given item.
 */
export const getInstantMixFromItem = <ThrowOnError extends boolean = false>(options: Options<GetInstantMixFromItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetInstantMixFromItemResponses, GetInstantMixFromItemErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/InstantMix',
        ...options
    });
};

/**
 * Creates an instant playlist based on a given genre.
 */
export const getInstantMixFromMusicGenreByName = <ThrowOnError extends boolean = false>(options: Options<GetInstantMixFromMusicGenreByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetInstantMixFromMusicGenreByNameResponses, GetInstantMixFromMusicGenreByNameErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/MusicGenres/{name}/InstantMix',
        ...options
    });
};

/**
 * Creates an instant playlist based on a given genre.
 */
export const getInstantMixFromMusicGenreById = <ThrowOnError extends boolean = false>(options: Options<GetInstantMixFromMusicGenreByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetInstantMixFromMusicGenreByIdResponses, GetInstantMixFromMusicGenreByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/MusicGenres/InstantMix',
        ...options
    });
};

/**
 * Creates an instant playlist based on a given playlist.
 */
export const getInstantMixFromPlaylist = <ThrowOnError extends boolean = false>(options: Options<GetInstantMixFromPlaylistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetInstantMixFromPlaylistResponses, GetInstantMixFromPlaylistErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Playlists/{itemId}/InstantMix',
        ...options
    });
};

/**
 * Creates an instant playlist based on a given song.
 */
export const getInstantMixFromSong = <ThrowOnError extends boolean = false>(options: Options<GetInstantMixFromSongData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetInstantMixFromSongResponses, GetInstantMixFromSongErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Songs/{itemId}/InstantMix',
        ...options
    });
};

/**
 * Get the item's external id info.
 */
export const getExternalIdInfos = <ThrowOnError extends boolean = false>(options: Options<GetExternalIdInfosData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExternalIdInfosResponses, GetExternalIdInfosErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/ExternalIdInfos',
        ...options
    });
};

/**
 * Applies search criteria to an item and refreshes metadata.
 */
export const applySearchCriteria = <ThrowOnError extends boolean = false>(options: Options<ApplySearchCriteriaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApplySearchCriteriaResponses, ApplySearchCriteriaErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/RemoteSearch/Apply/{itemId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get book remote search.
 */
export const getBookRemoteSearchResults = <ThrowOnError extends boolean = false>(options: Options<GetBookRemoteSearchResultsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetBookRemoteSearchResultsResponses, GetBookRemoteSearchResultsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/RemoteSearch/Book',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get box set remote search.
 */
export const getBoxSetRemoteSearchResults = <ThrowOnError extends boolean = false>(options: Options<GetBoxSetRemoteSearchResultsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetBoxSetRemoteSearchResultsResponses, GetBoxSetRemoteSearchResultsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/RemoteSearch/BoxSet',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get movie remote search.
 */
export const getMovieRemoteSearchResults = <ThrowOnError extends boolean = false>(options: Options<GetMovieRemoteSearchResultsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetMovieRemoteSearchResultsResponses, GetMovieRemoteSearchResultsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/RemoteSearch/Movie',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get music album remote search.
 */
export const getMusicAlbumRemoteSearchResults = <ThrowOnError extends boolean = false>(options: Options<GetMusicAlbumRemoteSearchResultsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetMusicAlbumRemoteSearchResultsResponses, GetMusicAlbumRemoteSearchResultsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/RemoteSearch/MusicAlbum',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get music artist remote search.
 */
export const getMusicArtistRemoteSearchResults = <ThrowOnError extends boolean = false>(options: Options<GetMusicArtistRemoteSearchResultsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetMusicArtistRemoteSearchResultsResponses, GetMusicArtistRemoteSearchResultsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/RemoteSearch/MusicArtist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get music video remote search.
 */
export const getMusicVideoRemoteSearchResults = <ThrowOnError extends boolean = false>(options: Options<GetMusicVideoRemoteSearchResultsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetMusicVideoRemoteSearchResultsResponses, GetMusicVideoRemoteSearchResultsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/RemoteSearch/MusicVideo',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get person remote search.
 */
export const getPersonRemoteSearchResults = <ThrowOnError extends boolean = false>(options: Options<GetPersonRemoteSearchResultsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetPersonRemoteSearchResultsResponses, GetPersonRemoteSearchResultsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/RemoteSearch/Person',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get series remote search.
 */
export const getSeriesRemoteSearchResults = <ThrowOnError extends boolean = false>(options: Options<GetSeriesRemoteSearchResultsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetSeriesRemoteSearchResultsResponses, GetSeriesRemoteSearchResultsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/RemoteSearch/Series',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get trailer remote search.
 */
export const getTrailerRemoteSearchResults = <ThrowOnError extends boolean = false>(options: Options<GetTrailerRemoteSearchResultsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetTrailerRemoteSearchResultsResponses, GetTrailerRemoteSearchResultsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/RemoteSearch/Trailer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refreshes metadata for an item.
 */
export const refreshItem = <ThrowOnError extends boolean = false>(options: Options<RefreshItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RefreshItemResponses, RefreshItemErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/Refresh',
        ...options
    });
};

/**
 * Deletes items from the library and filesystem.
 */
export const deleteItems = <ThrowOnError extends boolean = false>(options?: Options<DeleteItemsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteItemsResponses, DeleteItemsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items',
        ...options
    });
};

/**
 * Gets items based on a query.
 */
export const getItems = <ThrowOnError extends boolean = false>(options?: Options<GetItemsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemsResponses, GetItemsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items',
        ...options
    });
};

/**
 * Get Item User Data.
 */
export const getItemUserData = <ThrowOnError extends boolean = false>(options: Options<GetItemUserDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemUserDataResponses, GetItemUserDataErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/UserItems/{itemId}/UserData',
        ...options
    });
};

/**
 * Update Item User Data.
 */
export const updateItemUserData = <ThrowOnError extends boolean = false>(options: Options<UpdateItemUserDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateItemUserDataResponses, UpdateItemUserDataErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/UserItems/{itemId}/UserData',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets items based on a query.
 */
export const getResumeItems = <ThrowOnError extends boolean = false>(options?: Options<GetResumeItemsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetResumeItemsResponses, GetResumeItemsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/UserItems/Resume',
        ...options
    });
};

/**
 * Deletes an item from the library and filesystem.
 */
export const deleteItem = <ThrowOnError extends boolean = false>(options: Options<DeleteItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteItemResponses, DeleteItemErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}',
        ...options
    });
};

/**
 * Gets an item from a user's library.
 */
export const getItem = <ThrowOnError extends boolean = false>(options: Options<GetItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemResponses, GetItemErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}',
        ...options
    });
};

/**
 * Updates an item.
 */
export const updateItem = <ThrowOnError extends boolean = false>(options: Options<UpdateItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateItemResponses, UpdateItemErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Updates an item's content type.
 */
export const updateItemContentType = <ThrowOnError extends boolean = false>(options: Options<UpdateItemContentTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateItemContentTypeResponses, UpdateItemContentTypeErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/ContentType',
        ...options
    });
};

/**
 * Gets metadata editor info for an item.
 */
export const getMetadataEditorInfo = <ThrowOnError extends boolean = false>(options: Options<GetMetadataEditorInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMetadataEditorInfoResponses, GetMetadataEditorInfoErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/MetadataEditor',
        ...options
    });
};

/**
 * Gets similar items.
 */
export const getSimilarAlbums = <ThrowOnError extends boolean = false>(options: Options<GetSimilarAlbumsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSimilarAlbumsResponses, GetSimilarAlbumsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Albums/{itemId}/Similar',
        ...options
    });
};

/**
 * Gets similar items.
 */
export const getSimilarArtists = <ThrowOnError extends boolean = false>(options: Options<GetSimilarArtistsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSimilarArtistsResponses, GetSimilarArtistsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Artists/{itemId}/Similar',
        ...options
    });
};

/**
 * Gets all parents of an item.
 */
export const getAncestors = <ThrowOnError extends boolean = false>(options: Options<GetAncestorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAncestorsResponses, GetAncestorsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/Ancestors',
        ...options
    });
};

/**
 * Gets critic review for an item.
 * @deprecated
 */
export const getCriticReviews = <ThrowOnError extends boolean = false>(options: Options<GetCriticReviewsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCriticReviewsResponses, GetCriticReviewsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/CriticReviews',
        ...options
    });
};

/**
 * Downloads item media.
 */
export const getDownload = <ThrowOnError extends boolean = false>(options: Options<GetDownloadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDownloadResponses, GetDownloadErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/Download',
        ...options
    });
};

/**
 * Get the original file of an item.
 */
export const getFile = <ThrowOnError extends boolean = false>(options: Options<GetFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFileResponses, GetFileErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/File',
        ...options
    });
};

/**
 * Gets similar items.
 */
export const getSimilarItems = <ThrowOnError extends boolean = false>(options: Options<GetSimilarItemsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSimilarItemsResponses, GetSimilarItemsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/Similar',
        ...options
    });
};

/**
 * Get theme songs and videos for an item.
 */
export const getThemeMedia = <ThrowOnError extends boolean = false>(options: Options<GetThemeMediaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetThemeMediaResponses, GetThemeMediaErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/ThemeMedia',
        ...options
    });
};

/**
 * Get theme songs for an item.
 */
export const getThemeSongs = <ThrowOnError extends boolean = false>(options: Options<GetThemeSongsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetThemeSongsResponses, GetThemeSongsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/ThemeSongs',
        ...options
    });
};

/**
 * Get theme videos for an item.
 */
export const getThemeVideos = <ThrowOnError extends boolean = false>(options: Options<GetThemeVideosData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetThemeVideosResponses, GetThemeVideosErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/ThemeVideos',
        ...options
    });
};

/**
 * Get item counts.
 */
export const getItemCounts = <ThrowOnError extends boolean = false>(options?: Options<GetItemCountsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemCountsResponses, GetItemCountsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/Counts',
        ...options
    });
};

/**
 * Gets the library options info.
 */
export const getLibraryOptionsInfo = <ThrowOnError extends boolean = false>(options?: Options<GetLibraryOptionsInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLibraryOptionsInfoResponses, GetLibraryOptionsInfoErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Libraries/AvailableOptions',
        ...options
    });
};

/**
 * Reports that new movies have been added by an external source.
 */
export const postUpdatedMedia = <ThrowOnError extends boolean = false>(options: Options<PostUpdatedMediaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUpdatedMediaResponses, PostUpdatedMediaErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Library/Media/Updated',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets all user media folders.
 */
export const getMediaFolders = <ThrowOnError extends boolean = false>(options?: Options<GetMediaFoldersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMediaFoldersResponses, GetMediaFoldersErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Library/MediaFolders',
        ...options
    });
};

/**
 * Reports that new movies have been added by an external source.
 */
export const postAddedMovies = <ThrowOnError extends boolean = false>(options?: Options<PostAddedMoviesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAddedMoviesResponses, PostAddedMoviesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Library/Movies/Added',
        ...options
    });
};

/**
 * Reports that new movies have been added by an external source.
 */
export const postUpdatedMovies = <ThrowOnError extends boolean = false>(options?: Options<PostUpdatedMoviesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUpdatedMoviesResponses, PostUpdatedMoviesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Library/Movies/Updated',
        ...options
    });
};

/**
 * Gets a list of physical paths from virtual folders.
 */
export const getPhysicalPaths = <ThrowOnError extends boolean = false>(options?: Options<GetPhysicalPathsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPhysicalPathsResponses, GetPhysicalPathsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Library/PhysicalPaths',
        ...options
    });
};

/**
 * Starts a library scan.
 */
export const refreshLibrary = <ThrowOnError extends boolean = false>(options?: Options<RefreshLibraryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RefreshLibraryResponses, RefreshLibraryErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Library/Refresh',
        ...options
    });
};

/**
 * Reports that new episodes of a series have been added by an external source.
 */
export const postAddedSeries = <ThrowOnError extends boolean = false>(options?: Options<PostAddedSeriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAddedSeriesResponses, PostAddedSeriesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Library/Series/Added',
        ...options
    });
};

/**
 * Reports that new episodes of a series have been added by an external source.
 */
export const postUpdatedSeries = <ThrowOnError extends boolean = false>(options?: Options<PostUpdatedSeriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUpdatedSeriesResponses, PostUpdatedSeriesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Library/Series/Updated',
        ...options
    });
};

/**
 * Gets similar items.
 */
export const getSimilarMovies = <ThrowOnError extends boolean = false>(options: Options<GetSimilarMoviesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSimilarMoviesResponses, GetSimilarMoviesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Movies/{itemId}/Similar',
        ...options
    });
};

/**
 * Gets similar items.
 */
export const getSimilarShows = <ThrowOnError extends boolean = false>(options: Options<GetSimilarShowsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSimilarShowsResponses, GetSimilarShowsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Shows/{itemId}/Similar',
        ...options
    });
};

/**
 * Gets similar items.
 */
export const getSimilarTrailers = <ThrowOnError extends boolean = false>(options: Options<GetSimilarTrailersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSimilarTrailersResponses, GetSimilarTrailersErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Trailers/{itemId}/Similar',
        ...options
    });
};

/**
 * Removes a virtual folder.
 */
export const removeVirtualFolder = <ThrowOnError extends boolean = false>(options?: Options<RemoveVirtualFolderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<RemoveVirtualFolderResponses, RemoveVirtualFolderErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Library/VirtualFolders',
        ...options
    });
};

/**
 * Gets all virtual folders.
 */
export const getVirtualFolders = <ThrowOnError extends boolean = false>(options?: Options<GetVirtualFoldersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetVirtualFoldersResponses, GetVirtualFoldersErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Library/VirtualFolders',
        ...options
    });
};

/**
 * Adds a virtual folder.
 */
export const addVirtualFolder = <ThrowOnError extends boolean = false>(options?: Options<AddVirtualFolderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AddVirtualFolderResponses, AddVirtualFolderErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Library/VirtualFolders',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update library options.
 */
export const updateLibraryOptions = <ThrowOnError extends boolean = false>(options?: Options<UpdateLibraryOptionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UpdateLibraryOptionsResponses, UpdateLibraryOptionsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Library/VirtualFolders/LibraryOptions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Renames a virtual folder.
 */
export const renameVirtualFolder = <ThrowOnError extends boolean = false>(options?: Options<RenameVirtualFolderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RenameVirtualFolderResponses, RenameVirtualFolderErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Library/VirtualFolders/Name',
        ...options
    });
};

/**
 * Remove a media path.
 */
export const removeMediaPath = <ThrowOnError extends boolean = false>(options?: Options<RemoveMediaPathData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<RemoveMediaPathResponses, RemoveMediaPathErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Library/VirtualFolders/Paths',
        ...options
    });
};

/**
 * Add a media path to a library.
 */
export const addMediaPath = <ThrowOnError extends boolean = false>(options: Options<AddMediaPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddMediaPathResponses, AddMediaPathErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Library/VirtualFolders/Paths',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Updates a media path.
 */
export const updateMediaPath = <ThrowOnError extends boolean = false>(options: Options<UpdateMediaPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateMediaPathResponses, UpdateMediaPathErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Library/VirtualFolders/Paths/Update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get channel mapping options.
 */
export const getChannelMappingOptions = <ThrowOnError extends boolean = false>(options?: Options<GetChannelMappingOptionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetChannelMappingOptionsResponses, GetChannelMappingOptionsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/ChannelMappingOptions',
        ...options
    });
};

/**
 * Set channel mappings.
 */
export const setChannelMapping = <ThrowOnError extends boolean = false>(options: Options<SetChannelMappingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetChannelMappingResponses, SetChannelMappingErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/ChannelMappings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets available live tv channels.
 */
export const getLiveTvChannels = <ThrowOnError extends boolean = false>(options?: Options<GetLiveTvChannelsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLiveTvChannelsResponses, GetLiveTvChannelsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Channels',
        ...options
    });
};

/**
 * Gets a live tv channel.
 */
export const getChannel = <ThrowOnError extends boolean = false>(options: Options<GetChannelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChannelResponses, GetChannelErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Channels/{channelId}',
        ...options
    });
};

/**
 * Get guid info.
 */
export const getGuideInfo = <ThrowOnError extends boolean = false>(options?: Options<GetGuideInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetGuideInfoResponses, GetGuideInfoErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/GuideInfo',
        ...options
    });
};

/**
 * Gets available live tv services.
 */
export const getLiveTvInfo = <ThrowOnError extends boolean = false>(options?: Options<GetLiveTvInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLiveTvInfoResponses, GetLiveTvInfoErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Info',
        ...options
    });
};

/**
 * Delete listing provider.
 */
export const deleteListingProvider = <ThrowOnError extends boolean = false>(options?: Options<DeleteListingProviderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteListingProviderResponses, DeleteListingProviderErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/ListingProviders',
        ...options
    });
};

/**
 * Adds a listings provider.
 */
export const addListingProvider = <ThrowOnError extends boolean = false>(options?: Options<AddListingProviderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AddListingProviderResponses, AddListingProviderErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/ListingProviders',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Gets default listings provider info.
 */
export const getDefaultListingProvider = <ThrowOnError extends boolean = false>(options?: Options<GetDefaultListingProviderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDefaultListingProviderResponses, GetDefaultListingProviderErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/ListingProviders/Default',
        ...options
    });
};

/**
 * Gets available lineups.
 */
export const getLineups = <ThrowOnError extends boolean = false>(options?: Options<GetLineupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLineupsResponses, GetLineupsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/ListingProviders/Lineups',
        ...options
    });
};

/**
 * Gets available countries.
 */
export const getSchedulesDirectCountries = <ThrowOnError extends boolean = false>(options?: Options<GetSchedulesDirectCountriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSchedulesDirectCountriesResponses, GetSchedulesDirectCountriesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/ListingProviders/SchedulesDirect/Countries',
        ...options
    });
};

/**
 * Gets a live tv recording stream.
 */
export const getLiveRecordingFile = <ThrowOnError extends boolean = false>(options: Options<GetLiveRecordingFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLiveRecordingFileResponses, GetLiveRecordingFileErrors, ThrowOnError>({
        url: '/LiveTv/LiveRecordings/{recordingId}/stream',
        ...options
    });
};

/**
 * Gets a live tv channel stream.
 */
export const getLiveStreamFile = <ThrowOnError extends boolean = false>(options: Options<GetLiveStreamFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLiveStreamFileResponses, GetLiveStreamFileErrors, ThrowOnError>({
        url: '/LiveTv/LiveStreamFiles/{streamId}/stream.{container}',
        ...options
    });
};

/**
 * Gets available live tv epgs.
 */
export const getLiveTvPrograms = <ThrowOnError extends boolean = false>(options?: Options<GetLiveTvProgramsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLiveTvProgramsResponses, GetLiveTvProgramsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Programs',
        ...options
    });
};

/**
 * Gets available live tv epgs.
 */
export const getPrograms = <ThrowOnError extends boolean = false>(options?: Options<GetProgramsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GetProgramsResponses, GetProgramsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Programs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Gets a live tv program.
 */
export const getProgram = <ThrowOnError extends boolean = false>(options: Options<GetProgramData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProgramResponses, GetProgramErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Programs/{programId}',
        ...options
    });
};

/**
 * Gets recommended live tv epgs.
 */
export const getRecommendedPrograms = <ThrowOnError extends boolean = false>(options?: Options<GetRecommendedProgramsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRecommendedProgramsResponses, GetRecommendedProgramsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Programs/Recommended',
        ...options
    });
};

/**
 * Gets live tv recordings.
 */
export const getRecordings = <ThrowOnError extends boolean = false>(options?: Options<GetRecordingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRecordingsResponses, GetRecordingsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Recordings',
        ...options
    });
};

/**
 * Deletes a live tv recording.
 */
export const deleteRecording = <ThrowOnError extends boolean = false>(options: Options<DeleteRecordingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRecordingResponses, DeleteRecordingErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Recordings/{recordingId}',
        ...options
    });
};

/**
 * Gets a live tv recording.
 */
export const getRecording = <ThrowOnError extends boolean = false>(options: Options<GetRecordingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRecordingResponses, GetRecordingErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Recordings/{recordingId}',
        ...options
    });
};

/**
 * Gets recording folders.
 */
export const getRecordingFolders = <ThrowOnError extends boolean = false>(options?: Options<GetRecordingFoldersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRecordingFoldersResponses, GetRecordingFoldersErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Recordings/Folders',
        ...options
    });
};

/**
 * Gets live tv recording groups.
 * @deprecated
 */
export const getRecordingGroups = <ThrowOnError extends boolean = false>(options?: Options<GetRecordingGroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRecordingGroupsResponses, GetRecordingGroupsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Recordings/Groups',
        ...options
    });
};

/**
 * Get recording group.
 * @deprecated
 */
export const getRecordingGroup = <ThrowOnError extends boolean = false>(options: Options<GetRecordingGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetRecordingGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Recordings/Groups/{groupId}',
        ...options
    });
};

/**
 * Gets live tv recording series.
 * @deprecated
 */
export const getRecordingsSeries = <ThrowOnError extends boolean = false>(options?: Options<GetRecordingsSeriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRecordingsSeriesResponses, GetRecordingsSeriesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Recordings/Series',
        ...options
    });
};

/**
 * Gets live tv series timers.
 */
export const getSeriesTimers = <ThrowOnError extends boolean = false>(options?: Options<GetSeriesTimersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSeriesTimersResponses, GetSeriesTimersErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/SeriesTimers',
        ...options
    });
};

/**
 * Creates a live tv series timer.
 */
export const createSeriesTimer = <ThrowOnError extends boolean = false>(options?: Options<CreateSeriesTimerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateSeriesTimerResponses, CreateSeriesTimerErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/SeriesTimers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Cancels a live tv series timer.
 */
export const cancelSeriesTimer = <ThrowOnError extends boolean = false>(options: Options<CancelSeriesTimerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CancelSeriesTimerResponses, CancelSeriesTimerErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/SeriesTimers/{timerId}',
        ...options
    });
};

/**
 * Gets a live tv series timer.
 */
export const getSeriesTimer = <ThrowOnError extends boolean = false>(options: Options<GetSeriesTimerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSeriesTimerResponses, GetSeriesTimerErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/SeriesTimers/{timerId}',
        ...options
    });
};

/**
 * Updates a live tv series timer.
 */
export const updateSeriesTimer = <ThrowOnError extends boolean = false>(options: Options<UpdateSeriesTimerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateSeriesTimerResponses, UpdateSeriesTimerErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/SeriesTimers/{timerId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets the live tv timers.
 */
export const getTimers = <ThrowOnError extends boolean = false>(options?: Options<GetTimersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTimersResponses, GetTimersErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Timers',
        ...options
    });
};

/**
 * Creates a live tv timer.
 */
export const createTimer = <ThrowOnError extends boolean = false>(options?: Options<CreateTimerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateTimerResponses, CreateTimerErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Timers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Cancels a live tv timer.
 */
export const cancelTimer = <ThrowOnError extends boolean = false>(options: Options<CancelTimerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CancelTimerResponses, CancelTimerErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Timers/{timerId}',
        ...options
    });
};

/**
 * Gets a timer.
 */
export const getTimer = <ThrowOnError extends boolean = false>(options: Options<GetTimerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTimerResponses, GetTimerErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Timers/{timerId}',
        ...options
    });
};

/**
 * Updates a live tv timer.
 */
export const updateTimer = <ThrowOnError extends boolean = false>(options: Options<UpdateTimerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateTimerResponses, UpdateTimerErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Timers/{timerId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets the default values for a new timer.
 */
export const getDefaultTimer = <ThrowOnError extends boolean = false>(options?: Options<GetDefaultTimerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDefaultTimerResponses, GetDefaultTimerErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Timers/Defaults',
        ...options
    });
};

/**
 * Deletes a tuner host.
 */
export const deleteTunerHost = <ThrowOnError extends boolean = false>(options?: Options<DeleteTunerHostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteTunerHostResponses, DeleteTunerHostErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/TunerHosts',
        ...options
    });
};

/**
 * Adds a tuner host.
 */
export const addTunerHost = <ThrowOnError extends boolean = false>(options?: Options<AddTunerHostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AddTunerHostResponses, AddTunerHostErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/TunerHosts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get tuner host types.
 */
export const getTunerHostTypes = <ThrowOnError extends boolean = false>(options?: Options<GetTunerHostTypesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTunerHostTypesResponses, GetTunerHostTypesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/TunerHosts/Types',
        ...options
    });
};

/**
 * Resets a tv tuner.
 */
export const resetTuner = <ThrowOnError extends boolean = false>(options: Options<ResetTunerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResetTunerResponses, ResetTunerErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Tuners/{tunerId}/Reset',
        ...options
    });
};

/**
 * Discover tuners.
 */
export const discoverTuners = <ThrowOnError extends boolean = false>(options?: Options<DiscoverTunersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DiscoverTunersResponses, DiscoverTunersErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Tuners/Discover',
        ...options
    });
};

/**
 * Discover tuners.
 */
export const discvoverTuners = <ThrowOnError extends boolean = false>(options?: Options<DiscvoverTunersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DiscvoverTunersResponses, DiscvoverTunersErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveTv/Tuners/Discvover',
        ...options
    });
};

/**
 * Gets known countries.
 */
export const getCountries = <ThrowOnError extends boolean = false>(options?: Options<GetCountriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCountriesResponses, GetCountriesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Localization/Countries',
        ...options
    });
};

/**
 * Gets known cultures.
 */
export const getCultures = <ThrowOnError extends boolean = false>(options?: Options<GetCulturesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCulturesResponses, GetCulturesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Localization/Cultures',
        ...options
    });
};

/**
 * Gets localization options.
 */
export const getLocalizationOptions = <ThrowOnError extends boolean = false>(options?: Options<GetLocalizationOptionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLocalizationOptionsResponses, GetLocalizationOptionsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Localization/Options',
        ...options
    });
};

/**
 * Gets known parental ratings.
 */
export const getParentalRatings = <ThrowOnError extends boolean = false>(options?: Options<GetParentalRatingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetParentalRatingsResponses, GetParentalRatingsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Localization/ParentalRatings',
        ...options
    });
};

/**
 * Deletes an external lyric file.
 */
export const deleteLyrics = <ThrowOnError extends boolean = false>(options: Options<DeleteLyricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteLyricsResponses, DeleteLyricsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Audio/{itemId}/Lyrics',
        ...options
    });
};

/**
 * Gets an item's lyrics.
 */
export const getLyrics = <ThrowOnError extends boolean = false>(options: Options<GetLyricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLyricsResponses, GetLyricsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Audio/{itemId}/Lyrics',
        ...options
    });
};

/**
 * Upload an external lyric file.
 */
export const uploadLyrics = <ThrowOnError extends boolean = false>(options: Options<UploadLyricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadLyricsResponses, UploadLyricsErrors, ThrowOnError>({
        bodySerializer: null,
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Audio/{itemId}/Lyrics',
        ...options,
        headers: {
            'Content-Type': 'text/plain',
            ...options.headers
        }
    });
};

/**
 * Search remote lyrics.
 */
export const searchRemoteLyrics = <ThrowOnError extends boolean = false>(options: Options<SearchRemoteLyricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchRemoteLyricsResponses, SearchRemoteLyricsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Audio/{itemId}/RemoteSearch/Lyrics',
        ...options
    });
};

/**
 * Downloads a remote lyric.
 */
export const downloadRemoteLyrics = <ThrowOnError extends boolean = false>(options: Options<DownloadRemoteLyricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DownloadRemoteLyricsResponses, DownloadRemoteLyricsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Audio/{itemId}/RemoteSearch/Lyrics/{lyricId}',
        ...options
    });
};

/**
 * Gets the remote lyrics.
 */
export const getRemoteLyrics = <ThrowOnError extends boolean = false>(options: Options<GetRemoteLyricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRemoteLyricsResponses, GetRemoteLyricsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Providers/Lyrics/{lyricId}',
        ...options
    });
};

/**
 * Gets live playback media info for an item.
 */
export const getPlaybackInfo = <ThrowOnError extends boolean = false>(options: Options<GetPlaybackInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPlaybackInfoResponses, GetPlaybackInfoErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/PlaybackInfo',
        ...options
    });
};

/**
 * Gets live playback media info for an item.
 * For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.
 * Query parameters are obsolete.
 */
export const getPostedPlaybackInfo = <ThrowOnError extends boolean = false>(options: Options<GetPostedPlaybackInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetPostedPlaybackInfoResponses, GetPostedPlaybackInfoErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/PlaybackInfo',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Closes a media source.
 */
export const closeLiveStream = <ThrowOnError extends boolean = false>(options: Options<CloseLiveStreamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CloseLiveStreamResponses, CloseLiveStreamErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveStreams/Close',
        ...options
    });
};

/**
 * Opens a media source.
 */
export const openLiveStream = <ThrowOnError extends boolean = false>(options?: Options<OpenLiveStreamData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<OpenLiveStreamResponses, OpenLiveStreamErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/LiveStreams/Open',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Tests the network with a request with the size of the bitrate.
 */
export const getBitrateTestBytes = <ThrowOnError extends boolean = false>(options?: Options<GetBitrateTestBytesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetBitrateTestBytesResponses, GetBitrateTestBytesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Playback/BitrateTest',
        ...options
    });
};

/**
 * Gets all media segments based on an itemId.
 */
export const getItemSegments = <ThrowOnError extends boolean = false>(options: Options<GetItemSegmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetItemSegmentsResponses, GetItemSegmentsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/MediaSegments/{itemId}',
        ...options
    });
};

/**
 * Gets movie recommendations.
 */
export const getMovieRecommendations = <ThrowOnError extends boolean = false>(options?: Options<GetMovieRecommendationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMovieRecommendationsResponses, GetMovieRecommendationsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Movies/Recommendations',
        ...options
    });
};

/**
 * Gets all music genres from a given item, folder, or the entire library.
 * @deprecated
 */
export const getMusicGenres = <ThrowOnError extends boolean = false>(options?: Options<GetMusicGenresData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMusicGenresResponses, GetMusicGenresErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/MusicGenres',
        ...options
    });
};

/**
 * Gets a music genre, by name.
 */
export const getMusicGenre = <ThrowOnError extends boolean = false>(options: Options<GetMusicGenreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMusicGenreResponses, GetMusicGenreErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/MusicGenres/{genreName}',
        ...options
    });
};

/**
 * Gets available packages.
 */
export const getPackages = <ThrowOnError extends boolean = false>(options?: Options<GetPackagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPackagesResponses, GetPackagesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Packages',
        ...options
    });
};

/**
 * Gets a package by name or assembly GUID.
 */
export const getPackageInfo = <ThrowOnError extends boolean = false>(options: Options<GetPackageInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPackageInfoResponses, GetPackageInfoErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Packages/{name}',
        ...options
    });
};

/**
 * Installs a package.
 */
export const installPackage = <ThrowOnError extends boolean = false>(options: Options<InstallPackageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InstallPackageResponses, InstallPackageErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Packages/Installed/{name}',
        ...options
    });
};

/**
 * Cancels a package installation.
 */
export const cancelPackageInstallation = <ThrowOnError extends boolean = false>(options: Options<CancelPackageInstallationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CancelPackageInstallationResponses, CancelPackageInstallationErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Packages/Installing/{packageId}',
        ...options
    });
};

/**
 * Gets all package repositories.
 */
export const getRepositories = <ThrowOnError extends boolean = false>(options?: Options<GetRepositoriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRepositoriesResponses, GetRepositoriesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Repositories',
        ...options
    });
};

/**
 * Sets the enabled and existing package repositories.
 */
export const setRepositories = <ThrowOnError extends boolean = false>(options: Options<SetRepositoriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetRepositoriesResponses, SetRepositoriesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Repositories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets all persons.
 */
export const getPersons = <ThrowOnError extends boolean = false>(options?: Options<GetPersonsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPersonsResponses, GetPersonsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Persons',
        ...options
    });
};

/**
 * Get person by name.
 */
export const getPerson = <ThrowOnError extends boolean = false>(options: Options<GetPersonData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPersonResponses, GetPersonErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Persons/{name}',
        ...options
    });
};

export const getBreakdownReport = <ThrowOnError extends boolean = false>(options: Options<GetBreakdownReportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBreakdownReportResponses, GetBreakdownReportErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user_usage_stats/{breakdownType}/BreakdownReport',
        ...options
    });
};

export const getUserReportData = <ThrowOnError extends boolean = false>(options: Options<GetUserReportDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserReportDataResponses, GetUserReportDataErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user_usage_stats/{userId}/{date}/GetItems',
        ...options
    });
};

export const getDurationHistogramReport = <ThrowOnError extends boolean = false>(options?: Options<GetDurationHistogramReportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDurationHistogramReportResponses, GetDurationHistogramReportErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user_usage_stats/DurationHistogramReport',
        ...options
    });
};

export const getTvShowsReport = <ThrowOnError extends boolean = false>(options?: Options<GetTvShowsReportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTvShowsReportResponses, GetTvShowsReportErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user_usage_stats/GetTvShowsReport',
        ...options
    });
};

export const getHourlyReport = <ThrowOnError extends boolean = false>(options?: Options<GetHourlyReportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHourlyReportResponses, GetHourlyReportErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user_usage_stats/HourlyReport',
        ...options
    });
};

export const loadBackup = <ThrowOnError extends boolean = false>(options?: Options<LoadBackupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LoadBackupResponses, LoadBackupErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user_usage_stats/load_backup',
        ...options
    });
};

export const getMovieReport = <ThrowOnError extends boolean = false>(options?: Options<GetMovieReportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMovieReportResponses, GetMovieReportErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user_usage_stats/MoviesReport',
        ...options
    });
};

export const getUsageStats = <ThrowOnError extends boolean = false>(options?: Options<GetUsageStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsageStatsResponses, GetUsageStatsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user_usage_stats/PlayActivity',
        ...options
    });
};

export const saveBackup = <ThrowOnError extends boolean = false>(options?: Options<SaveBackupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SaveBackupResponses, SaveBackupErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user_usage_stats/save_backup',
        ...options
    });
};

export const customQuery = <ThrowOnError extends boolean = false>(options?: Options<CustomQueryData2, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CustomQueryResponses, CustomQueryErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user_usage_stats/submit_custom_query',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getTypeFilterList = <ThrowOnError extends boolean = false>(options?: Options<GetTypeFilterListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTypeFilterListResponses, GetTypeFilterListErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user_usage_stats/type_filter_list',
        ...options
    });
};

export const getUserReport = <ThrowOnError extends boolean = false>(options?: Options<GetUserReportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserReportResponses, GetUserReportErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user_usage_stats/user_activity',
        ...options
    });
};

export const getJellyfinUsers = <ThrowOnError extends boolean = false>(options?: Options<GetJellyfinUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetJellyfinUsersResponses, GetJellyfinUsersErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user_usage_stats/user_list',
        ...options
    });
};

export const ignoreListAdd = <ThrowOnError extends boolean = false>(options?: Options<IgnoreListAddData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<IgnoreListAddResponses, IgnoreListAddErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user_usage_stats/user_manage/add',
        ...options
    });
};

export const pruneUnknownUsers = <ThrowOnError extends boolean = false>(options?: Options<PruneUnknownUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PruneUnknownUsersResponses, PruneUnknownUsersErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user_usage_stats/user_manage/prune',
        ...options
    });
};

export const ignoreListRemove = <ThrowOnError extends boolean = false>(options?: Options<IgnoreListRemoveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<IgnoreListRemoveResponses, IgnoreListRemoveErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/user_usage_stats/user_manage/remove',
        ...options
    });
};

/**
 * Creates a new playlist.
 * For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.
 * Query parameters are obsolete.
 */
export const createPlaylist = <ThrowOnError extends boolean = false>(options?: Options<CreatePlaylistData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreatePlaylistResponses, CreatePlaylistErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Playlists',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a playlist.
 */
export const getPlaylist = <ThrowOnError extends boolean = false>(options: Options<GetPlaylistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPlaylistResponses, GetPlaylistErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Playlists/{playlistId}',
        ...options
    });
};

/**
 * Updates a playlist.
 */
export const updatePlaylist = <ThrowOnError extends boolean = false>(options: Options<UpdatePlaylistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdatePlaylistResponses, UpdatePlaylistErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Playlists/{playlistId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Removes items from a playlist.
 */
export const removeItemFromPlaylist = <ThrowOnError extends boolean = false>(options: Options<RemoveItemFromPlaylistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveItemFromPlaylistResponses, RemoveItemFromPlaylistErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Playlists/{playlistId}/Items',
        ...options
    });
};

/**
 * Gets the original items of a playlist.
 */
export const getPlaylistItems = <ThrowOnError extends boolean = false>(options: Options<GetPlaylistItemsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPlaylistItemsResponses, GetPlaylistItemsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Playlists/{playlistId}/Items',
        ...options
    });
};

/**
 * Adds items to a playlist.
 */
export const addItemToPlaylist = <ThrowOnError extends boolean = false>(options: Options<AddItemToPlaylistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddItemToPlaylistResponses, AddItemToPlaylistErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Playlists/{playlistId}/Items',
        ...options
    });
};

/**
 * Moves a playlist item.
 */
export const moveItem = <ThrowOnError extends boolean = false>(options: Options<MoveItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MoveItemResponses, MoveItemErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Playlists/{playlistId}/Items/{itemId}/Move/{newIndex}',
        ...options
    });
};

/**
 * Get a playlist's users.
 */
export const getPlaylistUsers = <ThrowOnError extends boolean = false>(options: Options<GetPlaylistUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPlaylistUsersResponses, GetPlaylistUsersErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Playlists/{playlistId}/Users',
        ...options
    });
};

/**
 * Remove a user from a playlist's users.
 */
export const removeUserFromPlaylist = <ThrowOnError extends boolean = false>(options: Options<RemoveUserFromPlaylistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveUserFromPlaylistResponses, RemoveUserFromPlaylistErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Playlists/{playlistId}/Users/{userId}',
        ...options
    });
};

/**
 * Get a playlist user.
 */
export const getPlaylistUser = <ThrowOnError extends boolean = false>(options: Options<GetPlaylistUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPlaylistUserResponses, GetPlaylistUserErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Playlists/{playlistId}/Users/{userId}',
        ...options
    });
};

/**
 * Modify a user of a playlist's users.
 */
export const updatePlaylistUser = <ThrowOnError extends boolean = false>(options: Options<UpdatePlaylistUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdatePlaylistUserResponses, UpdatePlaylistUserErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Playlists/{playlistId}/Users/{userId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reports that a session has stopped playing an item.
 */
export const onPlaybackStopped = <ThrowOnError extends boolean = false>(options: Options<OnPlaybackStoppedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OnPlaybackStoppedResponses, OnPlaybackStoppedErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/PlayingItems/{itemId}',
        ...options
    });
};

/**
 * Reports that a session has begun playing an item.
 */
export const onPlaybackStart = <ThrowOnError extends boolean = false>(options: Options<OnPlaybackStartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OnPlaybackStartResponses, OnPlaybackStartErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/PlayingItems/{itemId}',
        ...options
    });
};

/**
 * Reports a session's playback progress.
 */
export const onPlaybackProgress = <ThrowOnError extends boolean = false>(options: Options<OnPlaybackProgressData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OnPlaybackProgressResponses, OnPlaybackProgressErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/PlayingItems/{itemId}/Progress',
        ...options
    });
};

/**
 * Reports playback has started within a session.
 */
export const reportPlaybackStart = <ThrowOnError extends boolean = false>(options?: Options<ReportPlaybackStartData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ReportPlaybackStartResponses, ReportPlaybackStartErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Sessions/Playing',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Pings a playback session.
 */
export const pingPlaybackSession = <ThrowOnError extends boolean = false>(options: Options<PingPlaybackSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PingPlaybackSessionResponses, PingPlaybackSessionErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Sessions/Playing/Ping',
        ...options
    });
};

/**
 * Reports playback progress within a session.
 */
export const reportPlaybackProgress = <ThrowOnError extends boolean = false>(options?: Options<ReportPlaybackProgressData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ReportPlaybackProgressResponses, ReportPlaybackProgressErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Sessions/Playing/Progress',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reports playback has stopped within a session.
 */
export const reportPlaybackStopped = <ThrowOnError extends boolean = false>(options?: Options<ReportPlaybackStoppedData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ReportPlaybackStoppedResponses, ReportPlaybackStoppedErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Sessions/Playing/Stopped',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Marks an item as unplayed for user.
 */
export const markUnplayedItem = <ThrowOnError extends boolean = false>(options: Options<MarkUnplayedItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarkUnplayedItemResponses, MarkUnplayedItemErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/UserPlayedItems/{itemId}',
        ...options
    });
};

/**
 * Marks an item as played for user.
 */
export const markPlayedItem = <ThrowOnError extends boolean = false>(options: Options<MarkPlayedItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarkPlayedItemResponses, MarkPlayedItemErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/UserPlayedItems/{itemId}',
        ...options
    });
};

/**
 * Gets a list of currently installed plugins.
 */
export const getPlugins = <ThrowOnError extends boolean = false>(options?: Options<GetPluginsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPluginsResponses, GetPluginsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Plugins',
        ...options
    });
};

/**
 * Uninstalls a plugin.
 * @deprecated
 */
export const uninstallPlugin = <ThrowOnError extends boolean = false>(options: Options<UninstallPluginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UninstallPluginResponses, UninstallPluginErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Plugins/{pluginId}',
        ...options
    });
};

/**
 * Uninstalls a plugin by version.
 */
export const uninstallPluginByVersion = <ThrowOnError extends boolean = false>(options: Options<UninstallPluginByVersionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UninstallPluginByVersionResponses, UninstallPluginByVersionErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Plugins/{pluginId}/{version}',
        ...options
    });
};

/**
 * Disable a plugin.
 */
export const disablePlugin = <ThrowOnError extends boolean = false>(options: Options<DisablePluginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DisablePluginResponses, DisablePluginErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Plugins/{pluginId}/{version}/Disable',
        ...options
    });
};

/**
 * Enables a disabled plugin.
 */
export const enablePlugin = <ThrowOnError extends boolean = false>(options: Options<EnablePluginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EnablePluginResponses, EnablePluginErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Plugins/{pluginId}/{version}/Enable',
        ...options
    });
};

/**
 * Gets a plugin's image.
 */
export const getPluginImage = <ThrowOnError extends boolean = false>(options: Options<GetPluginImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPluginImageResponses, GetPluginImageErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Plugins/{pluginId}/{version}/Image',
        ...options
    });
};

/**
 * Gets plugin configuration.
 */
export const getPluginConfiguration = <ThrowOnError extends boolean = false>(options: Options<GetPluginConfigurationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPluginConfigurationResponses, GetPluginConfigurationErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Plugins/{pluginId}/Configuration',
        ...options
    });
};

/**
 * Updates plugin configuration.
 * Accepts plugin configuration as JSON body.
 */
export const updatePluginConfiguration = <ThrowOnError extends boolean = false>(options: Options<UpdatePluginConfigurationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdatePluginConfigurationResponses, UpdatePluginConfigurationErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Plugins/{pluginId}/Configuration',
        ...options
    });
};

/**
 * Gets a plugin's manifest.
 */
export const getPluginManifest = <ThrowOnError extends boolean = false>(options: Options<GetPluginManifestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetPluginManifestResponses, GetPluginManifestErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Plugins/{pluginId}/Manifest',
        ...options
    });
};

/**
 * Authorizes a pending quick connect request.
 */
export const authorizeQuickConnect = <ThrowOnError extends boolean = false>(options: Options<AuthorizeQuickConnectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthorizeQuickConnectResponses, AuthorizeQuickConnectErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/QuickConnect/Authorize',
        ...options
    });
};

/**
 * Attempts to retrieve authentication information.
 */
export const getQuickConnectState = <ThrowOnError extends boolean = false>(options: Options<GetQuickConnectStateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetQuickConnectStateResponses, GetQuickConnectStateErrors, ThrowOnError>({
        url: '/QuickConnect/Connect',
        ...options
    });
};

/**
 * Gets the current quick connect state.
 */
export const getQuickConnectEnabled = <ThrowOnError extends boolean = false>(options?: Options<GetQuickConnectEnabledData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetQuickConnectEnabledResponses, unknown, ThrowOnError>({
        url: '/QuickConnect/Enabled',
        ...options
    });
};

/**
 * Initiate a new quick connect request.
 */
export const initiateQuickConnect = <ThrowOnError extends boolean = false>(options?: Options<InitiateQuickConnectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<InitiateQuickConnectResponses, InitiateQuickConnectErrors, ThrowOnError>({
        url: '/QuickConnect/Initiate',
        ...options
    });
};

/**
 * Gets available remote images for an item.
 */
export const getRemoteImages = <ThrowOnError extends boolean = false>(options: Options<GetRemoteImagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRemoteImagesResponses, GetRemoteImagesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/RemoteImages',
        ...options
    });
};

/**
 * Downloads a remote image for an item.
 */
export const downloadRemoteImage = <ThrowOnError extends boolean = false>(options: Options<DownloadRemoteImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DownloadRemoteImageResponses, DownloadRemoteImageErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/RemoteImages/Download',
        ...options
    });
};

/**
 * Gets available remote image providers for an item.
 */
export const getRemoteImageProviders = <ThrowOnError extends boolean = false>(options: Options<GetRemoteImageProvidersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRemoteImageProvidersResponses, GetRemoteImageProvidersErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/RemoteImages/Providers',
        ...options
    });
};

/**
 * Get tasks.
 */
export const getTasks = <ThrowOnError extends boolean = false>(options?: Options<GetTasksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTasksResponses, GetTasksErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/ScheduledTasks',
        ...options
    });
};

/**
 * Get task by id.
 */
export const getTask = <ThrowOnError extends boolean = false>(options: Options<GetTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTaskResponses, GetTaskErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/ScheduledTasks/{taskId}',
        ...options
    });
};

/**
 * Update specified task triggers.
 */
export const updateTask = <ThrowOnError extends boolean = false>(options: Options<UpdateTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateTaskResponses, UpdateTaskErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/ScheduledTasks/{taskId}/Triggers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Stop specified task.
 */
export const stopTask = <ThrowOnError extends boolean = false>(options: Options<StopTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<StopTaskResponses, StopTaskErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/ScheduledTasks/Running/{taskId}',
        ...options
    });
};

/**
 * Start specified task.
 */
export const startTask = <ThrowOnError extends boolean = false>(options: Options<StartTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StartTaskResponses, StartTaskErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/ScheduledTasks/Running/{taskId}',
        ...options
    });
};

/**
 * Gets the search hint result.
 */
export const getSearchHints = <ThrowOnError extends boolean = false>(options: Options<GetSearchHintsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSearchHintsResponses, GetSearchHintsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Search/Hints',
        ...options
    });
};

/**
 * Get all password reset providers.
 */
export const getPasswordResetProviders = <ThrowOnError extends boolean = false>(options?: Options<GetPasswordResetProvidersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPasswordResetProvidersResponses, GetPasswordResetProvidersErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Auth/PasswordResetProviders',
        ...options
    });
};

/**
 * Get all auth providers.
 */
export const getAuthProviders = <ThrowOnError extends boolean = false>(options?: Options<GetAuthProvidersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAuthProvidersResponses, GetAuthProvidersErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Auth/Providers',
        ...options
    });
};

/**
 * Gets a list of sessions.
 */
export const getSessions = <ThrowOnError extends boolean = false>(options?: Options<GetSessionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSessionsResponses, GetSessionsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Sessions',
        ...options
    });
};

/**
 * Issues a full general command to a client.
 */
export const sendFullGeneralCommand = <ThrowOnError extends boolean = false>(options: Options<SendFullGeneralCommandData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SendFullGeneralCommandResponses, SendFullGeneralCommandErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Sessions/{sessionId}/Command',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Issues a general command to a client.
 */
export const sendGeneralCommand = <ThrowOnError extends boolean = false>(options: Options<SendGeneralCommandData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SendGeneralCommandResponses, SendGeneralCommandErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Sessions/{sessionId}/Command/{command}',
        ...options
    });
};

/**
 * Issues a command to a client to display a message to the user.
 */
export const sendMessageCommand = <ThrowOnError extends boolean = false>(options: Options<SendMessageCommandData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SendMessageCommandResponses, SendMessageCommandErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Sessions/{sessionId}/Message',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Instructs a session to play an item.
 */
export const play = <ThrowOnError extends boolean = false>(options: Options<PlayData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PlayResponses, PlayErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Sessions/{sessionId}/Playing',
        ...options
    });
};

/**
 * Issues a playstate command to a client.
 */
export const sendPlaystateCommand = <ThrowOnError extends boolean = false>(options: Options<SendPlaystateCommandData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SendPlaystateCommandResponses, SendPlaystateCommandErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Sessions/{sessionId}/Playing/{command}',
        ...options
    });
};

/**
 * Issues a system command to a client.
 */
export const sendSystemCommand = <ThrowOnError extends boolean = false>(options: Options<SendSystemCommandData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SendSystemCommandResponses, SendSystemCommandErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Sessions/{sessionId}/System/{command}',
        ...options
    });
};

/**
 * Removes an additional user from a session.
 */
export const removeUserFromSession = <ThrowOnError extends boolean = false>(options: Options<RemoveUserFromSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveUserFromSessionResponses, RemoveUserFromSessionErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Sessions/{sessionId}/User/{userId}',
        ...options
    });
};

/**
 * Adds an additional user to a session.
 */
export const addUserToSession = <ThrowOnError extends boolean = false>(options: Options<AddUserToSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddUserToSessionResponses, AddUserToSessionErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Sessions/{sessionId}/User/{userId}',
        ...options
    });
};

/**
 * Instructs a session to browse to an item or view.
 */
export const displayContent = <ThrowOnError extends boolean = false>(options: Options<DisplayContentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DisplayContentResponses, DisplayContentErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Sessions/{sessionId}/Viewing',
        ...options
    });
};

/**
 * Updates capabilities for a device.
 */
export const postCapabilities = <ThrowOnError extends boolean = false>(options?: Options<PostCapabilitiesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostCapabilitiesResponses, PostCapabilitiesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Sessions/Capabilities',
        ...options
    });
};

/**
 * Updates capabilities for a device.
 */
export const postFullCapabilities = <ThrowOnError extends boolean = false>(options: Options<PostFullCapabilitiesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostFullCapabilitiesResponses, PostFullCapabilitiesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Sessions/Capabilities/Full',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reports that a session has ended.
 */
export const reportSessionEnded = <ThrowOnError extends boolean = false>(options?: Options<ReportSessionEndedData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ReportSessionEndedResponses, ReportSessionEndedErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Sessions/Logout',
        ...options
    });
};

/**
 * Reports that a session is viewing an item.
 */
export const reportViewing = <ThrowOnError extends boolean = false>(options: Options<ReportViewingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ReportViewingResponses, ReportViewingErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Sessions/Viewing',
        ...options
    });
};

/**
 * Completes the startup wizard.
 */
export const completeWizard = <ThrowOnError extends boolean = false>(options?: Options<CompleteWizardData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CompleteWizardResponses, CompleteWizardErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Startup/Complete',
        ...options
    });
};

/**
 * Gets the initial startup wizard configuration.
 */
export const getStartupConfiguration = <ThrowOnError extends boolean = false>(options?: Options<GetStartupConfigurationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStartupConfigurationResponses, GetStartupConfigurationErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Startup/Configuration',
        ...options
    });
};

/**
 * Sets the initial startup wizard configuration.
 */
export const updateInitialConfiguration = <ThrowOnError extends boolean = false>(options: Options<UpdateInitialConfigurationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateInitialConfigurationResponses, UpdateInitialConfigurationErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Startup/Configuration',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets the first user.
 */
export const getFirstUser2 = <ThrowOnError extends boolean = false>(options?: Options<GetFirstUser2Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFirstUser2Responses, GetFirstUser2Errors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Startup/FirstUser',
        ...options
    });
};

/**
 * Sets remote access and UPnP.
 */
export const setRemoteAccess = <ThrowOnError extends boolean = false>(options: Options<SetRemoteAccessData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetRemoteAccessResponses, SetRemoteAccessErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Startup/RemoteAccess',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets the first user.
 */
export const getFirstUser = <ThrowOnError extends boolean = false>(options?: Options<GetFirstUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFirstUserResponses, GetFirstUserErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Startup/User',
        ...options
    });
};

/**
 * Sets the user name and password.
 */
export const updateStartupUser = <ThrowOnError extends boolean = false>(options?: Options<UpdateStartupUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UpdateStartupUserResponses, UpdateStartupUserErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Startup/User',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Gets all studios from a given item, folder, or the entire library.
 */
export const getStudios = <ThrowOnError extends boolean = false>(options?: Options<GetStudiosData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStudiosResponses, GetStudiosErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Studios',
        ...options
    });
};

/**
 * Gets a studio by name.
 */
export const getStudio = <ThrowOnError extends boolean = false>(options: Options<GetStudioData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStudioResponses, GetStudioErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Studios/{name}',
        ...options
    });
};

/**
 * Gets a list of available fallback font files.
 */
export const getFallbackFontList = <ThrowOnError extends boolean = false>(options?: Options<GetFallbackFontListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFallbackFontListResponses, GetFallbackFontListErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/FallbackFont/Fonts',
        ...options
    });
};

/**
 * Gets a fallback font file.
 */
export const getFallbackFont = <ThrowOnError extends boolean = false>(options: Options<GetFallbackFontData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFallbackFontResponses, GetFallbackFontErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/FallbackFont/Fonts/{name}',
        ...options
    });
};

/**
 * Search remote subtitles.
 */
export const searchRemoteSubtitles = <ThrowOnError extends boolean = false>(options: Options<SearchRemoteSubtitlesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchRemoteSubtitlesResponses, SearchRemoteSubtitlesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/RemoteSearch/Subtitles/{language}',
        ...options
    });
};

/**
 * Downloads a remote subtitle.
 */
export const downloadRemoteSubtitles = <ThrowOnError extends boolean = false>(options: Options<DownloadRemoteSubtitlesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DownloadRemoteSubtitlesResponses, DownloadRemoteSubtitlesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/RemoteSearch/Subtitles/{subtitleId}',
        ...options
    });
};

/**
 * Gets the remote subtitles.
 */
export const getRemoteSubtitles = <ThrowOnError extends boolean = false>(options: Options<GetRemoteSubtitlesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRemoteSubtitlesResponses, GetRemoteSubtitlesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Providers/Subtitles/Subtitles/{subtitleId}',
        ...options
    });
};

/**
 * Gets an HLS subtitle playlist.
 */
export const getSubtitlePlaylist = <ThrowOnError extends boolean = false>(options: Options<GetSubtitlePlaylistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSubtitlePlaylistResponses, GetSubtitlePlaylistErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/subtitles.m3u8',
        ...options
    });
};

/**
 * Upload an external subtitle file.
 */
export const uploadSubtitle = <ThrowOnError extends boolean = false>(options: Options<UploadSubtitleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadSubtitleResponses, UploadSubtitleErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Videos/{itemId}/Subtitles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deletes an external subtitle file.
 */
export const deleteSubtitle = <ThrowOnError extends boolean = false>(options: Options<DeleteSubtitleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSubtitleResponses, DeleteSubtitleErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Videos/{itemId}/Subtitles/{index}',
        ...options
    });
};

/**
 * Gets subtitles in a specified format.
 */
export const getSubtitleWithTicks = <ThrowOnError extends boolean = false>(options: Options<GetSubtitleWithTicksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSubtitleWithTicksResponses, unknown, ThrowOnError>({
        url: '/Videos/{routeItemId}/{routeMediaSourceId}/Subtitles/{routeIndex}/{routeStartPositionTicks}/Stream.{routeFormat}',
        ...options
    });
};

/**
 * Gets subtitles in a specified format.
 */
export const getSubtitle = <ThrowOnError extends boolean = false>(options: Options<GetSubtitleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSubtitleResponses, unknown, ThrowOnError>({
        url: '/Videos/{routeItemId}/{routeMediaSourceId}/Subtitles/{routeIndex}/Stream.{routeFormat}',
        ...options
    });
};

/**
 * Gets suggestions.
 */
export const getSuggestions = <ThrowOnError extends boolean = false>(options?: Options<GetSuggestionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSuggestionsResponses, GetSuggestionsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/Suggestions',
        ...options
    });
};

/**
 * Notify SyncPlay group that member is buffering.
 */
export const syncPlayBuffering = <ThrowOnError extends boolean = false>(options: Options<SyncPlayBufferingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SyncPlayBufferingResponses, SyncPlayBufferingErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/SyncPlay/Buffering',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Join an existing SyncPlay group.
 */
export const syncPlayJoinGroup = <ThrowOnError extends boolean = false>(options: Options<SyncPlayJoinGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SyncPlayJoinGroupResponses, SyncPlayJoinGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/SyncPlay/Join',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Leave the joined SyncPlay group.
 */
export const syncPlayLeaveGroup = <ThrowOnError extends boolean = false>(options?: Options<SyncPlayLeaveGroupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<SyncPlayLeaveGroupResponses, SyncPlayLeaveGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/SyncPlay/Leave',
        ...options
    });
};

/**
 * Gets all SyncPlay groups.
 */
export const syncPlayGetGroups = <ThrowOnError extends boolean = false>(options?: Options<SyncPlayGetGroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SyncPlayGetGroupsResponses, SyncPlayGetGroupsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/SyncPlay/List',
        ...options
    });
};

/**
 * Request to move an item in the playlist in SyncPlay group.
 */
export const syncPlayMovePlaylistItem = <ThrowOnError extends boolean = false>(options: Options<SyncPlayMovePlaylistItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SyncPlayMovePlaylistItemResponses, SyncPlayMovePlaylistItemErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/SyncPlay/MovePlaylistItem',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a new SyncPlay group.
 */
export const syncPlayCreateGroup = <ThrowOnError extends boolean = false>(options: Options<SyncPlayCreateGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SyncPlayCreateGroupResponses, SyncPlayCreateGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/SyncPlay/New',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request next item in SyncPlay group.
 */
export const syncPlayNextItem = <ThrowOnError extends boolean = false>(options: Options<SyncPlayNextItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SyncPlayNextItemResponses, SyncPlayNextItemErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/SyncPlay/NextItem',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request pause in SyncPlay group.
 */
export const syncPlayPause = <ThrowOnError extends boolean = false>(options?: Options<SyncPlayPauseData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<SyncPlayPauseResponses, SyncPlayPauseErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/SyncPlay/Pause',
        ...options
    });
};

/**
 * Update session ping.
 */
export const syncPlayPing = <ThrowOnError extends boolean = false>(options: Options<SyncPlayPingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SyncPlayPingResponses, SyncPlayPingErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/SyncPlay/Ping',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request previous item in SyncPlay group.
 */
export const syncPlayPreviousItem = <ThrowOnError extends boolean = false>(options: Options<SyncPlayPreviousItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SyncPlayPreviousItemResponses, SyncPlayPreviousItemErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/SyncPlay/PreviousItem',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request to queue items to the playlist of a SyncPlay group.
 */
export const syncPlayQueue = <ThrowOnError extends boolean = false>(options: Options<SyncPlayQueueData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SyncPlayQueueResponses, SyncPlayQueueErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/SyncPlay/Queue',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Notify SyncPlay group that member is ready for playback.
 */
export const syncPlayReady = <ThrowOnError extends boolean = false>(options: Options<SyncPlayReadyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SyncPlayReadyResponses, SyncPlayReadyErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/SyncPlay/Ready',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request to remove items from the playlist in SyncPlay group.
 */
export const syncPlayRemoveFromPlaylist = <ThrowOnError extends boolean = false>(options: Options<SyncPlayRemoveFromPlaylistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SyncPlayRemoveFromPlaylistResponses, SyncPlayRemoveFromPlaylistErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/SyncPlay/RemoveFromPlaylist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request seek in SyncPlay group.
 */
export const syncPlaySeek = <ThrowOnError extends boolean = false>(options: Options<SyncPlaySeekData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SyncPlaySeekResponses, SyncPlaySeekErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/SyncPlay/Seek',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request SyncPlay group to ignore member during group-wait.
 */
export const syncPlaySetIgnoreWait = <ThrowOnError extends boolean = false>(options: Options<SyncPlaySetIgnoreWaitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SyncPlaySetIgnoreWaitResponses, SyncPlaySetIgnoreWaitErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/SyncPlay/SetIgnoreWait',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request to set new playlist in SyncPlay group.
 */
export const syncPlaySetNewQueue = <ThrowOnError extends boolean = false>(options: Options<SyncPlaySetNewQueueData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SyncPlaySetNewQueueResponses, SyncPlaySetNewQueueErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/SyncPlay/SetNewQueue',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request to change playlist item in SyncPlay group.
 */
export const syncPlaySetPlaylistItem = <ThrowOnError extends boolean = false>(options: Options<SyncPlaySetPlaylistItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SyncPlaySetPlaylistItemResponses, SyncPlaySetPlaylistItemErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/SyncPlay/SetPlaylistItem',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request to set repeat mode in SyncPlay group.
 */
export const syncPlaySetRepeatMode = <ThrowOnError extends boolean = false>(options: Options<SyncPlaySetRepeatModeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SyncPlaySetRepeatModeResponses, SyncPlaySetRepeatModeErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/SyncPlay/SetRepeatMode',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request to set shuffle mode in SyncPlay group.
 */
export const syncPlaySetShuffleMode = <ThrowOnError extends boolean = false>(options: Options<SyncPlaySetShuffleModeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SyncPlaySetShuffleModeResponses, SyncPlaySetShuffleModeErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/SyncPlay/SetShuffleMode',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request stop in SyncPlay group.
 */
export const syncPlayStop = <ThrowOnError extends boolean = false>(options?: Options<SyncPlayStopData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<SyncPlayStopResponses, SyncPlayStopErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/SyncPlay/Stop',
        ...options
    });
};

/**
 * Request unpause in SyncPlay group.
 */
export const syncPlayUnpause = <ThrowOnError extends boolean = false>(options?: Options<SyncPlayUnpauseData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<SyncPlayUnpauseResponses, SyncPlayUnpauseErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/SyncPlay/Unpause',
        ...options
    });
};

/**
 * Gets information about the request endpoint.
 */
export const getEndpointInfo = <ThrowOnError extends boolean = false>(options?: Options<GetEndpointInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetEndpointInfoResponses, GetEndpointInfoErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/System/Endpoint',
        ...options
    });
};

/**
 * Gets information about the server.
 */
export const getSystemInfo = <ThrowOnError extends boolean = false>(options?: Options<GetSystemInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSystemInfoResponses, GetSystemInfoErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/System/Info',
        ...options
    });
};

/**
 * Gets public information about the server.
 */
export const getPublicSystemInfo = <ThrowOnError extends boolean = false>(options?: Options<GetPublicSystemInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPublicSystemInfoResponses, unknown, ThrowOnError>({
        url: '/System/Info/Public',
        ...options
    });
};

/**
 * Gets a list of available server log files.
 */
export const getServerLogs = <ThrowOnError extends boolean = false>(options?: Options<GetServerLogsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetServerLogsResponses, GetServerLogsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/System/Logs',
        ...options
    });
};

/**
 * Gets a log file.
 */
export const getLogFile = <ThrowOnError extends boolean = false>(options: Options<GetLogFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLogFileResponses, GetLogFileErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/System/Logs/Log',
        ...options
    });
};

/**
 * Pings the system.
 */
export const getPingSystem = <ThrowOnError extends boolean = false>(options?: Options<GetPingSystemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPingSystemResponses, unknown, ThrowOnError>({
        url: '/System/Ping',
        ...options
    });
};

/**
 * Pings the system.
 */
export const postPingSystem = <ThrowOnError extends boolean = false>(options?: Options<PostPingSystemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostPingSystemResponses, unknown, ThrowOnError>({
        url: '/System/Ping',
        ...options
    });
};

/**
 * Restarts the application.
 */
export const restartApplication = <ThrowOnError extends boolean = false>(options?: Options<RestartApplicationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RestartApplicationResponses, RestartApplicationErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/System/Restart',
        ...options
    });
};

/**
 * Shuts down the application.
 */
export const shutdownApplication = <ThrowOnError extends boolean = false>(options?: Options<ShutdownApplicationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ShutdownApplicationResponses, ShutdownApplicationErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/System/Shutdown',
        ...options
    });
};

/**
 * Gets wake on lan information.
 * @deprecated
 */
export const getWakeOnLanInfo = <ThrowOnError extends boolean = false>(options?: Options<GetWakeOnLanInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWakeOnLanInfoResponses, GetWakeOnLanInfoErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/System/WakeOnLanInfo',
        ...options
    });
};

/**
 * Gets the current UTC time.
 */
export const getUtcTime = <ThrowOnError extends boolean = false>(options?: Options<GetUtcTimeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUtcTimeResponses, unknown, ThrowOnError>({
        url: '/GetUtcTime',
        ...options
    });
};

/**
 * Gets the TMDb image configuration options.
 */
export const tmdbClientConfiguration = <ThrowOnError extends boolean = false>(options?: Options<TmdbClientConfigurationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TmdbClientConfigurationResponses, TmdbClientConfigurationErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Tmdb/ClientConfiguration',
        ...options
    });
};

/**
 * Finds movies and trailers similar to a given trailer.
 */
export const getTrailers = <ThrowOnError extends boolean = false>(options?: Options<GetTrailersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTrailersResponses, GetTrailersErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Trailers',
        ...options
    });
};

/**
 * Gets a trickplay tile image.
 */
export const getTrickplayTileImage = <ThrowOnError extends boolean = false>(options: Options<GetTrickplayTileImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTrickplayTileImageResponses, GetTrickplayTileImageErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Videos/{itemId}/Trickplay/{width}/{index}.jpg',
        ...options
    });
};

/**
 * Gets an image tiles playlist for trickplay.
 */
export const getTrickplayHlsPlaylist = <ThrowOnError extends boolean = false>(options: Options<GetTrickplayHlsPlaylistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTrickplayHlsPlaylistResponses, GetTrickplayHlsPlaylistErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Videos/{itemId}/Trickplay/{width}/tiles.m3u8',
        ...options
    });
};

/**
 * Gets episodes for a tv season.
 */
export const getEpisodes = <ThrowOnError extends boolean = false>(options: Options<GetEpisodesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEpisodesResponses, GetEpisodesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Shows/{seriesId}/Episodes',
        ...options
    });
};

/**
 * Gets seasons for a tv series.
 */
export const getSeasons = <ThrowOnError extends boolean = false>(options: Options<GetSeasonsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSeasonsResponses, GetSeasonsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Shows/{seriesId}/Seasons',
        ...options
    });
};

/**
 * Gets a list of next up episodes.
 */
export const getNextUp = <ThrowOnError extends boolean = false>(options?: Options<GetNextUpData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNextUpResponses, GetNextUpErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Shows/NextUp',
        ...options
    });
};

/**
 * Gets a list of upcoming episodes.
 */
export const getUpcomingEpisodes = <ThrowOnError extends boolean = false>(options?: Options<GetUpcomingEpisodesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUpcomingEpisodesResponses, GetUpcomingEpisodesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Shows/Upcoming',
        ...options
    });
};

/**
 * Gets an audio stream.
 */
export const getUniversalAudioStream = <ThrowOnError extends boolean = false>(options: Options<GetUniversalAudioStreamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUniversalAudioStreamResponses, GetUniversalAudioStreamErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Audio/{itemId}/universal',
        ...options
    });
};

/**
 * Gets an audio stream.
 */
export const headUniversalAudioStream = <ThrowOnError extends boolean = false>(options: Options<HeadUniversalAudioStreamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).head<HeadUniversalAudioStreamResponses, HeadUniversalAudioStreamErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Audio/{itemId}/universal',
        ...options
    });
};

/**
 * Gets a list of users.
 */
export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersResponses, GetUsersErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Users',
        ...options
    });
};

/**
 * Updates a user.
 */
export const updateUser = <ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateUserResponses, UpdateUserErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deletes a user.
 */
export const deleteUser = <ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserResponses, DeleteUserErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Users/{userId}',
        ...options
    });
};

/**
 * Gets a user by Id.
 */
export const getUserById = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdResponses, GetUserByIdErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Users/{userId}',
        ...options
    });
};

/**
 * Updates a user policy.
 */
export const updateUserPolicy = <ThrowOnError extends boolean = false>(options: Options<UpdateUserPolicyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateUserPolicyResponses, UpdateUserPolicyErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Users/{userId}/Policy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Authenticates a user by name.
 */
export const authenticateUserByName = <ThrowOnError extends boolean = false>(options: Options<AuthenticateUserByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthenticateUserByNameResponses, unknown, ThrowOnError>({
        url: '/Users/AuthenticateByName',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Authenticates a user with quick connect.
 */
export const authenticateWithQuickConnect = <ThrowOnError extends boolean = false>(options: Options<AuthenticateWithQuickConnectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthenticateWithQuickConnectResponses, AuthenticateWithQuickConnectErrors, ThrowOnError>({
        url: '/Users/AuthenticateWithQuickConnect',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Updates a user configuration.
 */
export const updateUserConfiguration = <ThrowOnError extends boolean = false>(options: Options<UpdateUserConfigurationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateUserConfigurationResponses, UpdateUserConfigurationErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Users/Configuration',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Initiates the forgot password process for a local user.
 */
export const forgotPassword = <ThrowOnError extends boolean = false>(options: Options<ForgotPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ForgotPasswordResponses, unknown, ThrowOnError>({
        url: '/Users/ForgotPassword',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Redeems a forgot password pin.
 */
export const forgotPasswordPin = <ThrowOnError extends boolean = false>(options: Options<ForgotPasswordPinData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ForgotPasswordPinResponses, unknown, ThrowOnError>({
        url: '/Users/ForgotPassword/Pin',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets the user based on auth token.
 */
export const getCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentUserResponses, GetCurrentUserErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Users/Me',
        ...options
    });
};

/**
 * Creates a user.
 */
export const createUserByName = <ThrowOnError extends boolean = false>(options: Options<CreateUserByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserByNameResponses, CreateUserByNameErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Users/New',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Updates a user's password.
 */
export const updateUserPassword = <ThrowOnError extends boolean = false>(options: Options<UpdateUserPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateUserPasswordResponses, UpdateUserPasswordErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Users/Password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets a list of publicly visible users for display on a login screen.
 */
export const getPublicUsers = <ThrowOnError extends boolean = false>(options?: Options<GetPublicUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPublicUsersResponses, unknown, ThrowOnError>({
        url: '/Users/Public',
        ...options
    });
};

/**
 * Gets intros to play before the main media item plays.
 */
export const getIntros = <ThrowOnError extends boolean = false>(options: Options<GetIntrosData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIntrosResponses, GetIntrosErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/Intros',
        ...options
    });
};

/**
 * Gets local trailers for an item.
 */
export const getLocalTrailers = <ThrowOnError extends boolean = false>(options: Options<GetLocalTrailersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLocalTrailersResponses, GetLocalTrailersErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/LocalTrailers',
        ...options
    });
};

/**
 * Gets special features for an item.
 */
export const getSpecialFeatures = <ThrowOnError extends boolean = false>(options: Options<GetSpecialFeaturesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSpecialFeaturesResponses, GetSpecialFeaturesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/{itemId}/SpecialFeatures',
        ...options
    });
};

/**
 * Gets latest media.
 */
export const getLatestMedia = <ThrowOnError extends boolean = false>(options?: Options<GetLatestMediaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLatestMediaResponses, GetLatestMediaErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/Latest',
        ...options
    });
};

/**
 * Gets the root folder from a user's library.
 */
export const getRootFolder = <ThrowOnError extends boolean = false>(options?: Options<GetRootFolderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRootFolderResponses, GetRootFolderErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Items/Root',
        ...options
    });
};

/**
 * Unmarks item as a favorite.
 */
export const unmarkFavoriteItem = <ThrowOnError extends boolean = false>(options: Options<UnmarkFavoriteItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UnmarkFavoriteItemResponses, UnmarkFavoriteItemErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/UserFavoriteItems/{itemId}',
        ...options
    });
};

/**
 * Marks an item as a favorite.
 */
export const markFavoriteItem = <ThrowOnError extends boolean = false>(options: Options<MarkFavoriteItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarkFavoriteItemResponses, MarkFavoriteItemErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/UserFavoriteItems/{itemId}',
        ...options
    });
};

/**
 * Deletes a user's saved personal rating for an item.
 */
export const deleteUserItemRating = <ThrowOnError extends boolean = false>(options: Options<DeleteUserItemRatingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserItemRatingResponses, DeleteUserItemRatingErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/UserItems/{itemId}/Rating',
        ...options
    });
};

/**
 * Updates a user's rating for an item.
 */
export const updateUserItemRating = <ThrowOnError extends boolean = false>(options: Options<UpdateUserItemRatingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateUserItemRatingResponses, UpdateUserItemRatingErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/UserItems/{itemId}/Rating',
        ...options
    });
};

/**
 * Get user views.
 */
export const getUserViews = <ThrowOnError extends boolean = false>(options?: Options<GetUserViewsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserViewsResponses, GetUserViewsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/UserViews',
        ...options
    });
};

/**
 * Get user view grouping options.
 */
export const getGroupingOptions = <ThrowOnError extends boolean = false>(options?: Options<GetGroupingOptionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetGroupingOptionsResponses, GetGroupingOptionsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/UserViews/GroupingOptions',
        ...options
    });
};

/**
 * Get video attachment.
 */
export const getAttachment = <ThrowOnError extends boolean = false>(options: Options<GetAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAttachmentResponses, GetAttachmentErrors, ThrowOnError>({
        url: '/Videos/{videoId}/{mediaSourceId}/Attachments/{index}',
        ...options
    });
};

/**
 * Gets additional parts for a video.
 */
export const getAdditionalPart = <ThrowOnError extends boolean = false>(options: Options<GetAdditionalPartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAdditionalPartResponses, GetAdditionalPartErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Videos/{itemId}/AdditionalParts',
        ...options
    });
};

/**
 * Removes alternate video sources.
 */
export const deleteAlternateSources = <ThrowOnError extends boolean = false>(options: Options<DeleteAlternateSourcesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAlternateSourcesResponses, DeleteAlternateSourcesErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Videos/{itemId}/AlternateSources',
        ...options
    });
};

/**
 * Gets a video stream.
 */
export const getVideoStream = <ThrowOnError extends boolean = false>(options: Options<GetVideoStreamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVideoStreamResponses, unknown, ThrowOnError>({
        url: '/Videos/{itemId}/stream',
        ...options
    });
};

/**
 * Gets a video stream.
 */
export const headVideoStream = <ThrowOnError extends boolean = false>(options: Options<HeadVideoStreamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).head<HeadVideoStreamResponses, unknown, ThrowOnError>({
        url: '/Videos/{itemId}/stream',
        ...options
    });
};

/**
 * Gets a video stream.
 */
export const getVideoStreamByContainer = <ThrowOnError extends boolean = false>(options: Options<GetVideoStreamByContainerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVideoStreamByContainerResponses, unknown, ThrowOnError>({
        url: '/Videos/{itemId}/stream.{container}',
        ...options
    });
};

/**
 * Gets a video stream.
 */
export const headVideoStreamByContainer = <ThrowOnError extends boolean = false>(options: Options<HeadVideoStreamByContainerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).head<HeadVideoStreamByContainerResponses, unknown, ThrowOnError>({
        url: '/Videos/{itemId}/stream.{container}',
        ...options
    });
};

/**
 * Merges videos into a single record.
 */
export const mergeVersions = <ThrowOnError extends boolean = false>(options: Options<MergeVersionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MergeVersionsResponses, MergeVersionsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Videos/MergeVersions',
        ...options
    });
};

/**
 * Get years.
 */
export const getYears = <ThrowOnError extends boolean = false>(options?: Options<GetYearsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetYearsResponses, GetYearsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Years',
        ...options
    });
};

/**
 * Gets a year.
 */
export const getYear = <ThrowOnError extends boolean = false>(options: Options<GetYearData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetYearResponses, GetYearErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/Years/{year}',
        ...options
    });
};